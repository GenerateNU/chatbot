Additional Resources
Branch: Hardware

Advice for Morale
Branch: Engagement
Tags: Leads/Chiefs Must-read
Morale Budget
Encouraging a vibrant team culture is essential in creating an environment conducive to work and where members are comfortable with each other and in being themselves. One effective way to achieve this is by utilizing the morale budget 
within the initial month.
This means discussing and determining a date for morale in your first team meeting
. 
Please be mindful of branch and org-wide [Upcoming Events!](Upcoming%20Events!%20447ae3efc67a44f4b217c3c066a37660.md) and ensure your morales do not overlap with them — these events serve as opportunities for members to engage within the Generate community. 
Whether it's hosting multiple smaller events, or planning one significant gathering, the goal is to transform these occasions into memorable experiences. It's crucial to emphasize that these events should transcend mere conveniences—aka simply ordering pizza for a team meeting—and instead 
be engaging to solicit team bonding
.
Event Diversity
Diversifying activity types can further enhance team engagement. 
Consider options such as 
Boba outings, hotpot dinners, Boda Borg challenges, pizza parties, ice skating excursions, bowling nights, making a homemade dinner, and visits to TimeOut Market
 (see more below).
To ensure these events are well-received, make it a point to discuss potential ideas during your team meetings. In the end, this 
opportunity is designed to be low-stakes and easy going
.
Attendance
It's vital for team leaders (Chiefs and PLs) to encourage event attendance and lead by example. 
Leading by example by being involved and attending events often proves to be the most effective method for ensuring active participation organization-wide and within teams
 while f
ostering a sense of camaraderie. 

Discuss the idea of walking together to events with your team members so that they feel more comfortable, especially as this is your first social outing.  
Don't forget the power of introductions and friendly reminders — facilitating connections among team members and with members across the organization helps create a more inclusive and tightly-knit culture.
Reimbursement
Make sure to check out 
Procurement + Reimbursements
 for info on our policies and processes for morale reimbursement.
Budget Balances
Team leaders can view their remaining budget balances through our 
FinOps Dashboard
.
Questions?
Reach out in 
#ops-help
 on Slack. We’re here to help!
Morale Ideas
`pp` = cost per person
Morale Ideas
Attendance Policy
Branch: All Generate
Tags: All Must-read
Members may miss up to 3 meetings per semester. 
The intent is that these are used as “sick days” (eg. for extenuating circumstances when you need a day off), not that every member uses all of them.
Basic Git Use
Branch: Hardware
Parent page: Development Resources (Development%20Resources%2014bf18dd5a9480dcb4cbfec87e0cb38b.md)
Intro to Git Workshop.pdf
The above workshop details all of the terminology and commands that you’ll need to use for Git in Generate
First, make sure you have 
Git installed and setup on your machine
If you need to clone the remote repository to your machine
If you need to clone the remote repository to your machine
Next, you’ll need to clone the remote repo onto your local machine. To do that:
Navigate to the Github page for the repo that you want to use
Click the green “<> Code” dropdown button
If you have SSH keys installed and setup, click on the “SSH” tab, otherwise keep it on the “HTTPS” tab
Copy the link shown
Open a terminal window on your computer and navigate to the directory where you want to clone the repo
Run the following command:
jsx
git clone <PASTE_YOUR_LINK_HERE>
Assuming no errors show up, you’ve successfully cloned the repo!
Now to actually use Git to track your project
Before doing any work, make sure that you’re on the correct Git branch.
 If you’re not:
If you don’t have the correct branch on your machine:
In the terminal, run this command to see a list of all braches (local and remote)
jsx
git branch -a
To get a remote branch on your machine to do work, run 
jsx
git fetch BRANCH_NAME
If you already fetched the branch and just need to switch to it, run 
jsx
git switch BRANCH_NAME
Whenever you make a significant change to a file (code, schematic, or layout), you’ll want to “commit” those changes to the remote repo. To do this:
Command Line:
Use the following command to check what files have been changed 
The names of changed files will be shown in red
jsx
git status
To add a file to the staging area (this is the area that tells git what files to actually track), run 
jsx
git add FILE_NAME
Once you’ve added all of the files that you want to the staging area, run 
jsx
git commit -m "type a nice message here describing what was changed and why"
Then type the following command to push your changes to the remote repo 
jsx
git push
GitHub Desktop:
Make sure that you only select the files that are important for everyone to have a copy of
Write a message in the box at the bottom left-hand corner of the app, and then hit the “commit” button

Basic KiCAD Use
Branch: Hardware
Parent page: Development Resources (Development%20Resources%2014bf18dd5a9480dcb4cbfec87e0cb38b.md)
Intro to KiCad.pdf
The above workshop details some KiCAD basics such as:
What KiCAD is
Important file types within KiCAD (and other eCAD applications)
How to create a KiCAD project
Some basic schematic stuff in KiCAD
Note that the method of downloading component files for use is outdated in the above slideshow
Instead, you can often find models in the Digikey page for a component, which most of the time do not require an account to download
Components on Mouser require an account to download
Accounts are also required for direct downloads from SnapEDA and Ultra Librarian
Make sure to keep all KiCAD files for your project in the /production/ecad directory of the git repository
Breaking Silos
Branch: Software

Design ↔ Frontend ↔ Backend Impacts
Branch: Software
Parent page: Breaking Silos (Breaking%20Silos%202d26a01f9689444bbb069f20491b80ac.md)
 Changes other members of the team can make which impact 
designers
:
  Request design QA as needed and in advance
 Changes other members of the team can make which impact 
frontend-focused developers
:
  A component library is built into a Figma page since it makes it simpler to translate designs to implementation
  Mockups are shared early and often so that engineering work can begin setting up while design work moves to polishing-focused stages
  Even when not included in the designs, it’s useful to have discussions of additional user interactions such as animation, hover states, etc. which can be added to components and implemented across the project to “bring it to life”
  Endpoints remain stable in both setup and contents, and mask implementation details, so that changes to the backend do not impact the frontend
  Types (where possible) are shared across the codebase to remove complexity and need for duplication of work.
 Changes other members of the team can make which impact 
backend-focused developers
:
  Important to have a shared understanding of how data is likely to expand in scope over time

Dev Best Practice
Branch: Software

Development Resources
Branch: Hardware
to be updated
Digital Stewardship
Branch: Operations
Tags: Leads/Chiefs Must-read
As a leader in Generate, you play a vital role in maintaining the integrity and effectiveness of our digital presence, tools, and financial stability. All Generate-related accounts, from Amazon to TikTok to GitHub, are managed by Operations.
Existing Accounts
Generate holds a number of accounts that we’ve accumulated over the years. These should be used whenever possible.
Creating New Accounts
Be Timely
If you know you will need an account, request it as soon as possible. Don’t wait until you’re ready to begin work with it; this may block your team and slow down progress.
Avoid Duplication
Before creating any new account, ask yourself:
Is there an existing account or service that can fulfill this need?
Can we expand the use of a current service instead of creating a new one?
 If creating a new account is absolutely necessary, be sure to follow the principles described below.
Digital Stewardship Principles
Email Accounts
Our official email address, generate@northeastern.edu, must be attached as the primary email to all Generate-related accounts.
Do not create new emails such as project- or team-specific Gmail accounts. If access to a service is needed, request credentials from your Director or reach out to the Operations Chief Information Architect (CIA). Be prepared with your justification.
Documentation and Security
Provide Operations CIA with all necessary info to create account by sending a message in 
#ops-help
. They will create the account, save credentials in Proton Pass, and share a Proton Pass link with you, if necessary.
Generate random, strong passwords from within Proton Pass, using at least 20 characters when able.
Do not share account credentials
 unless necessary for another member to perform their role.
Phone Numbers and MFA
Configure token-based 2FA via Proton Pass whenever possible.
Save any security questions with answers and recovery/backup codes in Proton Pass.
Do not use personal phone numbers for 2FA or other account-related details.
If a number is necessary to have on file, use Frank’s. DM your lead if you don’t have his number.
Subscriptions
If a new service will require a paid subscription, or if you need to sign up for a new or modified paid subscription on an existing account:
Secure approval from your branch Director.
Submit a Procurement Request for the service.
Inform the Operations CFO directly on Slack of the frequency and cost.
Northeastern University is a 
tax-exempt
 institution. Generate can not pay for, and members may not be reimbursed for, sales tax on purchases. Most official accounts already have our tax-exempt status on file with the vendor.
Questions
If you have any questions, please reach out to your Lead, branch Director, or in 
#ops-help
 on Slack.
December 11, 2024 to update
Downloading SamacSys Library Loader
Branch: Hardware
Parent page: Software Installation and Setup (Software%20Installation%20and%20Setup%2014bf18dd5a948054ae9df39c601a5c44.md)
SamacSyS library loader is a powerful FREE tool that can be used to import footprint downloads from mouser directly into your ECAD software. This comes in handy, as it saves you the time of looking for the footprint and organizing it yourself. The only thing you need to do for this is set it to the right directory within the application settings.
Head to the link below and 
scroll all the way down:
SamacSys Library Loader
This program is also relatively easy to download. Run the executable file downloaded and you should be importing footprints like a pro!
Note that this application will require you to create a SamacSys account.

EXP Makerspace
Branch: Hardware
Parent page: Additional Resources (Additional%20Resources%20150f18dd5a9480b08e9debbd72440983.md)
The Sherman Center has an agreement with the 
EXP Makerspace
 that allows our build teams to purchase materials from their Materials Shop. These purchases are directly billed to Generate and the Sherman Center at the end of each semester.
Prices
A 
price list
 is published 
here
.
PLA Material
Until further notice through fall 2024, it is Generate’s understanding that PLA material is 
free
 when purchased through the EXP Makerspace. Consider making use of this for your projects.
 This has the potential to benefit the Sherman Center, Generate, and our clients. That said, please steward these resources well as if you were purchasing them ordinarily.
Process
Communicate with your Project Lead to approve purchases and track budget expenses.
 We will not receive a final bill until the 
end
 of the semester. Tracking expenses with your team at purchase time is crucial for managing your team’s budget.
When purchasing items, mention that you are purchasing these items on behalf of Generate, part of the Sherman Center.

Electric Component Library
Branch: Hardware
This folder is a library for all electronic components that have been used by Generate Hardware ECE teams in the past. It is intended to be the first step in component selection, so teams can confidently choose parts that have been used and proven to work in the past.
Note that this is not a comprehensive guide of all hardware available to you. It is simply a collection of items that have been used in the past by previous Generate groups.
This includes parts from the following projects:
AutoPasser (v1 & v2)
HiddenLock
Hot Date Kitchen (v1 & v2)
TatumRobotics
Fufu Pot (v1 & v2)
WaveWise (v1 & v2)
RoboUmp
CStar
Muscle Recovery
PCB Components:
LEDs
MCUs
Voltage Regulation
Email Signature Template
Branch: All Generate
Video Tutorial
https://www.loom.com/share/c285b0b3a6b340f4a91165e564e7173d?sid=dd4dfd73-2904-4b77-bd4c-4d995209ff68
Template
[Full Name]
 | [Your Title], Generate
Michael J. and Ann Sherman Center for Engineering Entrepreneurship Education
008C Hayden Hall | Northeastern University
T: 617-373-3148 | M: [your phone number] | [your @northeastern.edu email address]
Example

Figma → Dev Handoff: Best Practices
Branch: Software
Parent page: Breaking Silos (Breaking%20Silos%202d26a01f9689444bbb069f20491b80ac.md)
Whether you are a PL looking to scope out Figma dev for your team or a software developer looking for resources, this is the place to be!
TLDR;
Really great info about Figma developer handoff:
https://www.figma.com/best-practices/guide-to-developer-handoff/
Feel free to browse this example file to see Figma's "can view" capabilities:
https://www.figma.com/file/ewVdWlAd3ZZ3lZSWBaTWZn/Generate:-Dev-Handoff-Example?node-id=0%3A1
Step-by-step Guide:
Steps for Design Handoff:
Make sure the front-end devs on your team have Figma access. If they do not, collect their emails and either:
Give them "can view" access on Figma
Send the emails to the Chief Designer who will deal with permissions
Once the lofis for a feature are complete, move those screens (and any accompanying prototyping) to a new page titled: " Feature Name: lofis"
ShowNxt example: " Coach Signup: lofis"
This consistent naming convention is important
 so your devs know where to look for designs!
Use the 
Auto Flow Plug-in
 to draw connections between screens so your devs will understand the flows better
 Let your team know what lofis are ready to dev! 
Steps for Front-End Development:
Once designers let you know a feature is ready for development, open the Figma file (either within the desktop app or in a browser)
If the design is ready for development, the designs will be found on the page named: " Feature Name: lofis" or " Feature Name: hifis"
The  means the designers are done making adjustments to these screens
Navigate to the page you will be developing (using the left side panel) 
BEST PART:
 Select the frame (
A.K.A. art board
) you are working on, and using the 
code panel
 (on the right-side of the screen) you have the opportunity to view code for CSS, iOS (Swift), and Android (XML) and any descriptions added to components.
You also have the ability to export any assets from the file using the 
Export
 feature
THIS CODE IS NOT MEANT TO BE DIRECTLY COPY & PASTED, IT SHOULD BE USED AS A HELPFUL RESOURCE
Video for overview:
https://youtu.be/B242nuM3y2s
Components:
Component usage is very important for both efficient design and development practices. Designers should be using components to build out their designs.
 (A.K.A. symbols in sketch)
Definition: "
Components are elements you can reuse across your designs. They help to create and manage consistent designs across projects. You can create components from any layers or objects you've designed. These could be a whole range of things like buttons, icons, layouts, and more.
"
— 
https://help.figma.com/hc/en-us/articles/360038662654-Guide-to-Components-in-Figma#:~:text=Components are elements you can,icons%2C layouts%2C and more
.
 In other words: Components are like puzzle pieces. A designer creates components, and reuses them as pieces of the design. If used correctly, developers should be able to create and style the components, and reuse them throughout the development process.
Useful Video:
https://youtu.be/k74IrUNaJVk?list=PLXDU_eVOJTx5LSjOmeBYMuvaa4UayfMe4
‼  Designers  ‼
If you haven't implemented components yet, it's okay! But it is important for you to transition your designs to be component-based.
If you are unsure of how to do this, here are some great resources to use to learn about all things component-based design!
Figma.com's resources
Figma defines component best practices
Introduction to component variants
Auto Layout intro video
There are so many capabilities built into components!!!! I encourage you to learn more about using 
auto layout
, creating variants, and swapping out components easily. If you struggle with something in Figma, chances are someone has also struggled with the same thing. The internet and 
figma.com
 have some really awesome resources to help make your design process more efficient! 
(P.S. reach out to your Chief Designer with any questions, they would love to help!)

Flexible Spending Pool (FSP)
Branch: Operations
Tags: FAQ, Leads/Chiefs Must-read
Overview
This Spring, we are introducing the Flexible Spending Pool (FSP) which will be applied to all expenses, excluding hardware project materials and standard team morale expenses. 
By implementing zero-based budgeting, we aim to:
Optimize Resource Allocation
Enhance transparency and predictability in budgeting decisions
Ensure spending aligns with Generate’s missions and values
Timeline/Process
Identify Team Goals
: Teams should identify their goals at the start of the semester and routinely track and evaluate their effectiveness.
Anticipate Expenses
: Expenses must be proposed 
AT LEAST
 10 days in advance. Expense proposals can be submitted through this form: 
Expense Proposal Form
. This form can also be found in the sidebar of the FinOps Dashboard under “Quicklinks”.
Proposal Review
: Proposals will then be evaluated against a predefined set of evaluation criteria within one week, during weekly Procurement meetings: Tuesday and Thursday evenings.
Final Decision and Tracking
: A final approval, approval with modification, or rejection will be communicated via Slack.
*
Please note that we are unable to process purchases of gift cards
Evaluation Criteria
All expense proposals will be evaluated on the following criteria, taking into consideration its alignment with 
Generate’s goals, impact, feasibility, and fund availability
. 
Alignment
:
How closely does this expense align with:
Generate’s values: innovative, driven, empathetic, spirited, growth-oriented
Sherman Center’s values: intentional, developmental, inclusive
Impact
:
What is the projected impact of this expense?
Estimated Return on Investment (ROI)
Targeted Audience and beneficiaries
Number of people positively impacted
Contribution to Generate’s goals, reach, and reputation
Efficiency of the proposed spending
Feasibility
:
Was the proposal submitted on time (two weeks in advance)?
Is the timeline practical and achievable?
Fund Availability
:
Current funding pool status
Opportunity Cost: Does this expense redirect funds from high-priority needs?
Questions?
For clarification or support, reach out in the 
#ops-help
 Slack channel. We’re here to help!
Generate for Course Credit
Branch: All Generate
Depending on your role, you can take Generate as a class for course credit! Registration takes place during standard semester registration.
For members on client-facing Hardware teams... 
You can register for a 4 credit, general engineering elective course: GE 4892 "Engineering Product Design & Prototyping Challenge Project".
- To register: Register on Banner, like you would for any other course.
- How it works: You'll have regular check-ins with Prof. Sivak and other students in the cohort and complete additional technical writing and analysis of your Generate project to convert the work you are doing for Generate into credit.
- For more information: Email Professor Mark Sivak ([m.sivak@northeastern.edu](mailto:m.sivak@northeastern.edu))
For members on client-facing Software teams in TL/SWE roles...
If you have not yet completed Software Engineering (CS 4530 / CS 5500) or Software Development (CS 4500) you can register for a 4 credit, capstone-fulfilling, writing intensive-fulfilling, and SWE/SWD-replacing course: CS 4535 "Professional Practicum Capstone"
If you have completed Software Engineering (CS 4530 / CS 5500) or Software Development (CS 4500), you can register for a 4 credit Khoury elective.
- How it works: You'll have regular check-ins with Prof. Sivak and other students in the cohort and complete additional technical writing and analysis of your Generate project to convert the work you are doing for Generate into credit.
This is the first semester (Spring 2025) we have had this opportunity available, so we are unable to share further details at this time. If you email with your interest in registering, we will share more details once they are available.

Git Guidelines
Branch: Software
Parent page: Dev Best Practice (Dev%20Best%20Practice%20365b0c30e6ac4885b80bf0a3e2f5749f.md)
https://www.loom.com/share/ae3b496b3c8641f8a931e6e4414fac1d
What is Git?
Git is a version control system. At a high level, one can think of it as a timeline management utility for your codebase. All of your code can be backed up in different versions, at different time points, so that any code modifications are safe and the codebase can be reverted to a specific point if a bug is introduced.
Note that GitHub, GitLab, and Bitbucket are specific platforms that host code and are based on Git.
How do I install Git?
https://www.loom.com/share/4e8ed6bef63a44c4b3710f28605cf515
https://git-scm.com/book/en/v2/Getting-Started-Installing-Git
Apart from installing Git in the system, you would need to clone the specific repository you will be working on to your system. This repository will be a part of the GenerateNU organization on GitHub. 
bash
git init <project directory>
git clone <repo url> #git@HOSTNAME:USERNAME/REPONAME.git
You can read how to initiate and clone a repository in details through this link: 
https://www.atlassian.com/git/tutorials/setting-up-a-repository
.
 Additionally, you could install Git as an extension for your respective IDE (a lot of them also include it out-of-the-box), making the process considerably easier.
Overall Git Workflow
https://www.loom.com/share/3585716bb8d04fd193826b92bd78076b
In Generate, we normally use the 
git feature branch
 workflow, which you can read more about below or with the following link: 
https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow
. 
We also have this helpful graphic that summarized the workflow:
Branches 
git checkout <branch>
One of the most important Git concept you need to be comfortable with is 
branches.
 A branch is a version of a codebase, that started at a specific timepoint from the 
original branch
, and then the code that follows in that version may 
branch off
 from the code in the original version.
The cool thing about Git is that you can have all those version stored at the same time — you just need to switch between them to see those versions with the following command:
bash
git checkout <branch name>
There are three main branch types that you will need to understand: 
main
, 
dev
, and 
feature-x
 branches. 
For a detailed tutorial on Git branching, check out this page: 
https://www.atlassian.com/git/tutorials/using-branches
.
Main branch
The 
main
 branch stores the latest release of the codebase. That means that the code stored will likely be used in production or relayed to the client. The code that is stored here 
must
 compile and correspond to the design/coding standards set by the team. 
 `main` branch will be protected: that means that you will not be able to push to the branch directly, and the only way that the code in this branch will be updates is through the PRs from the `dev` branch (read on for details). This ensures the safety of the code in the branch.
Dev branch
The 
dev
 branch is used for development (often called a “staging” branch) — it will contain the latest finished work done by the team, including some of the changes/features that are not yet ready to be released and published in the 
main
 branch. 
 When working on a specific ticket, you should not be working in the `dev` branch directly — make sure to pull the code from `dev`, and branch off to a feature-specific version of code.
Feature branches
Note that I said “branch
es
”: there may be multiple features branches active at the same time. Throughout the semester, you will be assigned (in small teams) tickets that ask you to implement a certain feature or fix a certain bug. To do so, you will branch off 
dev
 branch and create a new branch that you will be working on. When you are done with your feature/bug, you will open a 
pull request
 from your feature branch to the 
dev
 branch, so your feature can be merged back into 
dev
. 
We use the following naming convention for the branch names: 
<group>/<ticket number>-<description>
. 
The 
group
 is either:
feature
, if you are implementing a feature
bug
, if you are fixing a bug
The 
ticket number
 is 
optional
, and you may have one in the ticket tracking system your PL will use.
Finally, the 
description
 is a few 
lowercase
 words separated by 
hyphens
 (-), that briefly describe the feature or a bug you are implementing.
Some examples:
feature/10-sign-in-screen
 (with the ticket number)
feature/sign-out-screen
 (without the ticket number)
bug/15-aws-integration
 (fixing the AWS integration, refer to ticket 15)
 Avoid undescriptive or long branch names such as `bug/screen` or `feature/23-adding-the-sign-in-screen-with-better-design-to-the-home-page`.
Commits 
git commit -m <commit message>
git commit
 is one of the primary functions in Git, allowing you to record changes made since the last backup point, and submit all those changes under a common message explaining the changes made. 
How often should I commit?
Product development is all about 
small, incremental changes.
 When you commit, a good rule of thumb is a single implemented feature/fixed bug/changes in dependencies, etc. Basically, your commit should be dedicated to one thing, and one thing only. 
That said, however, committing a change in a single line of comments is probably unnecessary, as that clutters the timeline. Adding a feature that involved a LOT of changes in a single commit is not a good idea either — if such a situation happens, try to break the feature down in smaller parts and work on them incrementally.
 Before committing, make sure that your code compiles and works!
Writing a good commit message
There are many standards used in writing commit messages, and at Generate, we use conventional commits. You can read the specifications over here: 
https://www.conventionalcommits.org/en/v1.0.0-beta.2/
. Also, there are many extensions for your favorite IDEs that automate these commit messages:
VSCode: 
https://marketplace.visualstudio.com/items?itemName=vivaxy.vscode-conventional-commits
IntelliJ: 
https://plugins.jetbrains.com/plugin/13389-conventional-commit
Pushes 
git push
A 
git push
 command submits and stores the version of code stored on your local machine to the 
remote
 (i.e., the server that hosts the code repository). 
 Remember to never directly `git push` into `main` and to always push your work at the end of the day, so that you don’t lose the work you’ve done to an accident.
Read more about pushing here: 
https://www.atlassian.com/git/tutorials/syncing/git-push
.
Pull Requests & Code Reviews
Once you have pushed a change, or collection of changes, the last step is to get review from your team. This is the most important stage of the software lifecycle, and it is also the hardest to define rules for. In this section, we will lay out some general guidelines for creating, reviewing, and merging Pull Requests. 
Code reviews are one of the most important parts of the software development lifecycle. They give team members the chance to read your code, leave comments of varying degrees, request changes, and ultimately approve the change with a . In many professional settings, especially those that could have financial implications for the company, a teammate’s approval is legally required before deploying code to production! 
 Due to the nature of code reviews, the makeup of a team may dictate tweaks on code review “best” practices. This section outlines one way to review code, but defer to your tech or project lead for final say.
What is the purpose of a PR?
A PR is a request to merge some feature code into the 
main
 branch, which effectively releases a new version of the code base. PRs are helpful for a variety of reasons:
Keep the team on the same page with changes to their codebase, regardless of who the code author is
Make it easy to review a new 
feature
Foster conversation around code changes for everyone to weigh in on and learn from
Allow for asynchronous iterations on proposed code changes
When should I open a PR?
As soon as you 
push
 changes to a new branch, you should open a PR. There are two stages of PRs, and it’s important to respect them so that your team knows when it’s time to look at proposed code.
 Code doesn’t have to be perfect to be reviewed - get review early and often! If you spend hours perfecting your feature before getting any review, then PR review exposes a core aspect of the feature needing to change, all that polish-time is wasted.
Draft:
 PR. Once you 
push
 new code, you should open a draft PR. This lets your team know that “
Hey, I’m working on this new feature locally, but it’s not ready for review yet.
” At this point, anyone can see the PR, but it will not have any requested reviewers.
Ready for Review
 PR. Once the feature is complete, and all the 
TODO
 items in the associated ticket are implemented, it is time to request review from teammates. Removing the 
Draft:
 prefix from the PR name, and selecting relevant team members from the 
Reviewers
 tab on the PR lets them know that the author thinks the code is ready to go to production, and would like feedback.
How to write a good PR description?
When creating a pull request, there are a few things to keep in mind:
What stage is it in?
 If the PR is still in progress, prefix the PR title with 
Draft:
 or 
WIP:
 (Work In Progress). Also, create the PR as a “
Draft Pull Request
”.
What background info should the reviewer know?
 Maybe you have a diagram of the workflow that this PR implements, or a design of the database table that this PR introduces. Maybe to fully understand, and eventually 
Approve
, your change, the reviewer should be familiar with an earlier change. Any resources or information that the author should know about before reading your code changes should be included in the description.
What problem does the code change solve?
 Depending on your team, you may have a Trello card, a GitHub issue, a Jira ticket, etc. to link to which contains more information on what this change is intended to do. This is helpful to keep the PR description short, but should not be the entire description.
How was this change tested?
 Every change should be tested to some extent before asking someone else to look at it. If you tested the change locally, explain how. Maybe your PR includes a bunch of unit tests for new functionality. Maybe your project contains acceptance tests, and you included that. The possibilities are endless, but by including your testing strategy for the reviewer, they won’t need to worry as much about reviewing the code for bugs, and can focus on style, structure, and overall efficiency.
Who should I request review from?
Defer to instructions from your project lead and technical lead here, but typically when you open a pull request you should request review form 2 people: your technical lead, and whoever has worked most closely with this code. If you worked alone, or with one person on it, and it’s a new chunk of code, maybe request review from whoever was involved in the data design. Or request review from someone who is working on the same feature in a different part of the stack, or the person who will be picking up the next related feature.
If you want other eyes on the code, or it’s a particularly interesting feature PR, feel free to request review from the software director & chief architect using the 
Code Walk Request
 form!
How to review code?
When submitting a PR review, you will see there are options to 
Comment
, 
Approve
, and 
Request Changes
. The goal of opening a PR is to get 
Approval
 from your team. The goal of reviewing a PR is to read the code, and sniff out any aspects of the code that may not be ready for the production environment. I like to group my comments in a review into three categories, ordered by severity.
Nit
: Comments
Nit level comments are nit picks - they are comments that don’t necessarily change the functionality of a piece of code, but they may make a suggestion to make it easier to read, slightly more efficient, or more aligned with the project’s style standards. Typically, it’s up to the PR author on whether or not they want to resolve these comments, or ignore them.
Example Nit Comments:
 Maybe you find a method name to be misleading, so you’ll leave a 
Nit:
 explaining what you expected the method to do vs. what the method actually does. Maybe your project typically names it database tables as singular nouns (like 
item
), and this PR introduces a table with a plural name (like 
item_prices
), so you leave a comment like 
Nit: To stay in line with the rest of this project's tables, can we rename 
item_prices
 to 
item_price
?
Conversational Comments
I don’t prefix these, but these are comments that should definitely be addressed with conversation on the PR. Sometimes they’re genuine questions, sometimes they’re inquiries about design decisions, sometimes they are comments that don’t block the PR, but are more significant than a 
Nit
. 
Example Conversational Comments
: Maybe a new PR introduces an 
item_price
 table like in the previous example, but there are a lot of duplicate columns between this new table and the 
item
 table. Depending on the size of your data and the usages of this table, it’s unclear to you why the columns are duplicated, so you may leave a comment like 
Why does 
item_price
 duplicate both the 
name
 and 
id
 columns from the pre-existing 
item
 table? Should these ever be different from their corresponding columns in the 
item
 table?
 Alternatively, maybe you noticed the author re-wrote a helper function that effectively exists somewhere else in the codebase. You may leave a comment pointing them to that function, and ask if they could try to use that one to keep the codebase cleaner.
Blocking:
 Comments
These comments should block the PR from being merged, which can be done using the 
Request Changes
 button when submitting your review. The are comments about changes that you 
know
 are going to break some code, or do not follow the designs that this feature is supposed to implement.
Example Blocking Comments
. Extending the previous example, maybe one of the goals with the 
item_price
 table is to be able to handle prices in any currency, but the 
item_price
 table does not have a column for 
currency
. You may leave a comment like 
Blocking: According to the designs, we want to track prices of any currency. Should the 
item_price
 table have a 
currency
 column, or should there be a 
TODO:
 comment in the code to add this support later on?
 Additionally, maybe you notice a boolean logic error in a function named 
isItemOverPrice(int price)
 that returns 
this.price < price
 instead of 
this.price > price
. This would be a blocking change, because it will return the opposite of what you expect, and could lead to some nasty bugs. Additionally, maybe you also suggest the author write a unit test for a certain function that has particularly complicated logic, such that future contributors will not accidentally edit the complicated function and break the code. 
 If you open up a pull request, and want eyes on it from some more experience engineers within Generate, request review from the chief architect and/or software director using the [Code Walk Registration Form](https://www.notion.so/Code-Walk-Registration-4973418aa31f44e0991e2125e8dc2a97?pvs=21)! Try to do this at least once this semester!

Git Installation and Setup
Branch: Hardware
Parent page: Software Installation and Setup (Software%20Installation%20and%20Setup%2014bf18dd5a948054ae9df39c601a5c44.md)
Create a GitHub account
Install Git
Mac:
Git is already installed on MacOS devices
Windows:
Download for Windows
Make sure to also install Git Bash during the installation, everything else can be left as default
Linux:
You probably already know what Git is/have it installed, but if not:
Ubuntu: In the terminal, run:
jsx
apt-get install git
GitHub Permissions Structure
Branch: Operations, Software
Generate operates a Github organization and Github account. All work related to Generate projects 
must
 exist in and be owned by Generate’s organization.
Access shall be granted as follows:
Organization Owners
: Generate email, Executive Director, Software Director, Operations Director
Organization Members
: Software Chiefs, Project Leads, and Technical Leads
Outside Collaborators
: everyone else who needs access to one or more repositories
Each collaborator can be assigned one of: read, triage, write, maintain, admin
Software Engineers should be assigned 
Write
Product Leads & Technical Leads should be assigned 
Admin
 Admin is the only role that can manage and invite members to a repository.

Google Drive 
Branch: Operations

Helpful Videos
Branch: Hardware
Parent page: Additional Resources (Additional%20Resources%20150f18dd5a9480b08e9debbd72440983.md)
KiCAD Tutorials (Phils Lab)
https://www.youtube.com/watch?v=nkHFoxe0mrU&pp=ygUPcGhpbHMgbGFiIGtpY2Fk
https://www.youtube.com/watch?v=PlXd3lLZ4vc&pp=ygUPcGhpbHMgbGFiIGtpY2Fk
Decoupling Caps 
https://www.youtube.com/watch?v=BcJ6UdDx1vg
Hosting Meaningful 1:1s
Branch: Engagement
Tags: Leads/Chiefs Must-read
Frequency and Purpose
You’ll be meeting with members of your team one-on-one at least 
three (3)
 times this semester. Each time, have a conversation with them. There isn’t a checklist to follow or a strict path you must take. Instead, 
it’s an opportunity to get to know your team members, figure out what they want to do, where they want to grow
. 
First 1:1
Your first 1:1 should take place within the first two weeks of the semester.
There’s a high likelihood that you won’t know most of the members joining your team this semester. Your first 1:1 is a chance for you to sit down and learn a few things about them. 
This is also your time to talk to them about the project(s) they’ll be working on. Pay attention to which aspects they seem interested in.
Here are a few starter questions to consider:
Why did they join / re-join Generate?
What do they like to do outside of classes and clubs?
What parts of the project resonate with them?
Also, 
ask them what their goals for the semester are
 and 
write them down
 . A part of your role as a leader is knowing what people want to work on and giving them assignments that line up with those goals and interests. You want to be the person who is looking out for them and making sure they’re growing and developing the skills they want to hone. These can be personal (confidence), professional (documentation), or technical (engineering). 
If they’re new to Generate, give them a tour of the Sherm so they know what the names of the different spaces are! See [Spaces + Reservations](Spaces%20+%20Reservations%206051768940a94a63a20f8c7f53ee8d73.md) for in-depth guide on our spaces
Mid-Semester 1:1
No better time to check in with your member than half way through the semester. Hopefully you’ve written down their goals from your first meeting and can check in with them. Ask:
Do they feel like they’re building toward those goals?
Do they feel connected with their team, their branch, and Generate as a whole?
Do they want to keep working on the kind of stuff they’ve been doing?
In terms of how they’ve been working with other members, this is a good time to ask them about that! Determine if there any issues they’re facing on the team and if there are better ways you can support them as their lead.
This is the only direct feedback that you’ll be able to iterate upon to improve your team dynamics and efficiencies. 
Take good notes and try to see what you can do to improve your team.
If there are any points of improvements for them you wish to share, this is also a good time for them to hear it and have time to improve upon it.
Final 1:1
Your final 1:1 should take place within the last two weeks of the semester.
At the end of the semester, you’ll host one last 1:1 with each team member to recap and close out the semester. This is a good time to gather feedback for your successor, to hype up your members about all the work they did, and to give words of wisdom/encouragement/whatever comes to you in the moment. Make sure to incorporate key learnings into your team’s internal handoff document.
Revisit each members’ goals, and help them see how they progressed toward and achieved them. Give concrete examples to show your care and help them realize what might be difficult to see. Recognize any shortcomings and emphasize that those are okay. If applicable, offer potential future opportunities to hone the skills they want to refine, gain more experience/exposure, or build on their experience with your team. This could be a recommendation to explore other Generate teams/branches, courses, faculty, external resources, internships/co-ops, research, or events.
If genuine, encourage staying in touch. Exchange numbers and connect on LinkedIn if you haven’t already. Consider offering yourself as a resource for future class, co-op, or full-time decisions.
1:1 Template
Here’s a starting point for you all!
1:1 Templates
Questions
If you have questions about what to discuss in a 1:1, how to broach a topic, or how to give feedback, reach out to your Director or any member of Generate’s Management team.
How to Represent Generate at Events
Branch: Engagement

You may not represent Generate at public events without explicit approval from @Chirag Chadha (Engagement Director).
If are you interested in representing Generate at a public event or would like table please contact @Josephine or @Chirag Chadha on Slack.
If you have been asked to perform set up or take down for tabling events please see 
Instructions for Tabling
If asked to table for Generate at an event, please keep in mind the following guidelines:
Embody Generate's and Sherman Center's values
: Reference the three values of the Sherman Center: developmental, inclusive, and intentional. Keep in mind the values that each member represents and how our priorities align with the organization and its members.
Know your audience and highlight Generate's impact
: Tailor your pitch to students, potential clients, or partners as appropriate. Be prepared to share key statistics about our projects, members, and community. Emphasize the real-world experience members gain through Generate.
Showcase diversity and inclusivity
: Mention that Generate welcomes students from all 7 undergraduate colleges at Northeastern, with members from 50+ different majors. Discuss both Hardware and Software project varieties, as well as our Operations, Engagement, and Data Solutions opportunities.
Share success stories with enthusiasm
: If you're in HW or SW, have 1-2 client success stories ready, like Hot Date Kitchen, Alia, or Jurni. Let your passion for Generate shine through in your interactions.
Be knowledgeable and humble
: Be ready to discuss Generate's work, but know your limits. If you're unsure about something, offer to connect the person with the appropriate Generate leader.
Example pitch:
Generate is a student-led product development studio at Northeastern University. We bring together passionate students from all majors to work on real-world projects for startups and industry clients. Our community of over 160 active members tackles both hardware and software challenges, providing innovative solutions while gaining invaluable professional experience.
We've completed over 100 projects for 95+ clients, ranging from mobile apps to physical prototypes. Our work has helped startups scale their operations and bring new products to market. For example, we developed a machine for Hot Date Kitchen that tripled their production capacity.
Generate offers students a unique opportunity to apply classroom knowledge to real projects, develop leadership skills, and build a strong professional network. We're always looking for driven, innovative students to join our community and contribute to exciting projects.
In-house Calendar Package
Parent page: Dev Best Practice (Dev%20Best%20Practice%20365b0c30e6ac4885b80bf0a3e2f5749f.md)
@Alder Whiteford
Instructions for Tabling
Branch: Engagement
Parent page: How to Represent Generate at Events (How%20to%20Represent%20Generate%20at%20Events%200ba4a59732a6496586a3050c0c230f11.md)
Set Up
If you are the first person tabling at a club fair or similar event, 
you are responsible for bringing the tabling materials below to the event
 — if you are this person, this information will be communicated you.
Begin by picking up materials in Big Studio:
Item List
2x Poster Boards 
(behind the door)
1x Retractable Banner + Stand (in black carrying case)
1x Blue Generate Tablecloth ‼
2x Black Bin 
(see images below)
 containing:

Please let us know if any of the items in this box are running low
Stickers
Business Cards
Pens
Post-its
Generate, Sherman Center, Forge, Venture Co-Op Handouts
Take these materials to the designated tabling location. A table should be provided to you. If there is no table, please reach out to @Chirag Chadha on Slack.
Once you arrive at the table:
Place the 
tablecloth
 over our assigned table
Set up the 
retractable banner
(see 
video
 for a visual explanation)
:
 Be careful not to damage the base or the banner itself. It is 
VERY
 delicate— if you take it out too quickly it may rip. Similarly, when putting the banner back into the base, ensure that it is properly aligned otherwise it won’t fit properly.
Prepare the base
: Place the base on a flat surface. 
Adjust the feet
: Twist the feet so they are perpendicular to the base. 
Extend the pole
: Take the pole out of its case and extend it to its full length. 
Insert the pole
: Put the pole into the hole in the base. 
Pull up the banner
: Gently pull the banner up from the base using the top bar. Be careful not to smudge, rip, bend, or crease the banner itself.
Attach the banner
: Attach the banner to the top of the pole using the hook
Adjust for stability
: Make sure the banner is taut and stands straight.
Prop up the 
poster boards
 against something and place them on either ends of the table. 
That’s it! Good luck tabling :)
Take Down
Begin by putting the 
retractable banner
 back into its base 
(see 
video
 for visual explanation):
Place your foot on the base and secure it in place.
Place your hand at the top of the banner and unhook/unlatch it.
Slowly bring down the banner back to the base. Mind the edges.
Disassemble the pole.
Rotate the feet so they’re parallel with the base and can fit into the carrying case.
Place the base followed by the poles 
(on top)
 in the black carrying case.
Remove any materials from the table and 
neatly fold the table cloth
. Be sure to place it back into the bin it was originally in.
Confirm you have all items:
Item List
2x Poster Boards
1x Retractable Banner + Stand (in black carrying case)
1x Black Bin with Tablecloth 
(see bottom right of image)
Return all items to 
Big Studio One (HA-010A)
 where they were 
originally found
(see picture below)

KiCAD Installation and Setup
Branch: Hardware
Parent page: Software Installation and Setup (Software%20Installation%20and%20Setup%2014bf18dd5a948054ae9df39c601a5c44.md)
Go to 
the KiCAD website
 and click the blue “Download” button in the middle of the page
Select your operating system, then:
For macOS/Windows:
Use the GitHub download link to download the version of KiCAD that Generate currently uses (as of Fall 2024, this is KiCAD v8)
When the .exe file finishes downloading, run it
Make sure to install the default component libraries during the installation
For Linux:
Follow the steps https://www.kicad.org/download/linux/

LEDs
Branch: Hardware
Parent page: Electric Component Library (Electric%20Component%20Library%2014bf18dd5a94803eaa2eeed1de225989.md)
LEDs
Leadership Workshop Slides & Recording
Branch: All Generate
Zoom Recording
Video Conferencing, Web Conferencing, Webinars, Screen Sharing
PowerPoint Slides
[https://docs.google.com/presentation/d/1wvAU0zncf2NgP5RdpP4ZKLYK7khWv4r7YX8Doi7vNiE/edit?usp=sharing](https://docs.google.com/presentation/d/1wvAU0zncf2NgP5RdpP4ZKLYK7khWv4r7YX8Doi7vNiE/edit?usp=sharing)
MCUs
Branch: Hardware
Parent page: Electric Component Library (Electric%20Component%20Library%2014bf18dd5a94803eaa2eeed1de225989.md)
While popular, we would generally advise against using an Arduino Uno or ATMega for your project. They’re great for prototyping, but they’re not very powerful and multiple teams have had issues with the ATMega in the past. 
| MCU | Used On/Use Case | Capabilities | Links |
| --- | --- | --- | --- |
| ESP32-DEVKITC-32U | AutoPasser |  | 
ESP32-DEVKITC-32U | DigiKey Electronics
ESP32-DEVKITC-32U
  |
| Raspberry Pi Pico | WaveWise v2 | Wi-Fi (with extension)
Bluetooth (with extension)
26 GPIO pins
133 MHz Clock
2MB Flash Memory | 
SC0915 | DigiKey Electronics
SC0915
  |
| Jetson Nano | RoboUmp | Wi-Fi (with adapter)
Bluetooth (with adapter)
21 GPIO pins
1.43GHz Clock
4GB Memory
MicroSD Card Slot for Main Storage | 
NVIDIA Jetson Nano
  |
| PIC16LF877A-I/PT | HiddenLock | 33 GPIO pins
20MHz Clock
14KB Flash Memory | 
Microchip PIC16LF877A-I/PT
PIC16LF877A-I/PT
  |
| ESP32-WROOM-32UE-N16 | CStar
Muscle Recovery | 33 GPIO pins
20MHz Clock
14KB Flash Memory | 
ESP32-WROOM-32UE-N16 | DigiKey Electronics
ESP32-WROOM-32E (16MB)
  |
| RP2040 
 | FufuPot | 30 GPIO pins
133 MHz Clock
16MB Flash Memory | 
SC0914(13) | DigiKey Electronics
SC0914(13)
 |
AutoPasser 
WaveWise v2 
C Star 
Muscle Recovery 
FufuPot

Makerspace 
Branch: Hardware
Parent page: Additional Resources (Additional%20Resources%20150f18dd5a9480b08e9debbd72440983.md)
Microcontroller Implementations
Branch: Hardware
Parent page: Development Resources (Development%20Resources%2014bf18dd5a9480dcb4cbfec87e0cb38b.md)
Overview
Typically any system that requires any sort of controls, computing, and telemetry will need some sort of microcontroller or system on chip (SoC). These come in a few different form factors with varying levels of customizability. This page will focus solely on choosing what form of microcontroller to implement.
Bare MCU or Carrier Board?
Bare MCU
The term “bare-metal programming” refers to programming without any operating system or resources to aid in the running of your program; although you gain fast access to register information and memory, there aren’t any safeguards or optimizations in place to aid your program in running.
When I refer to a “bare MCU,” I am referring to a microcontroller unit implemented directly on a custom PCB, like in the picture below. I.e. you make the PCB and directly slap the chip on there and route/set up all the IO of the chip.
This reduces form factor incredibly and can result in much lower power draws, as well as being able to directly configure the IO of the chip to suit your needs. However, this adds additional complexity in implementation and flashing. This is also typically how most professional companies will end up doing it since they have the manpower to drive this additional complexity in development. You might also want to weigh the difficulty in manufacturing and try and spec an MCU that is relatively easy to solder (i.e. through drag soldering).
Carrier Board
With microcontroller development boards, like an STM32 Nucleo board or a Teensy 4.1 (shown in pictures below), the bare MCU has already been implemented for you and all you need to do is route the IO of the board itself. The routing of the IO can be done through a “carrier” board.
With microcontroller development boards, like an STM32 Nucleo board or a Teensy 4.1 (shown in pictures below), the bare MCU has already been implemented for you and all you need to do is route the IO of the board itself. The routing of the IO can be done through a “carrier” board.
These development boards typically have a bunch of safety circuits and other chips onboard to aid development, such as an EEPROM, onboard activity LED, reset button, and maybe even an IC to handle flashing the chip. All of that would need to be manually implemented with a bare MCU. However, you lose out on the configurability, have to work with a much larger form factor, and usually end up with an overspec’ed microcontroller board because there are things that you will never need onboard.
“Carrier” board for an STM32 dev board using vertical connectors, but can just be soldered in place to reduce height at the cost of ease of disassembly
Mission, Values, & Priorities
Branch: All Generate
Tags: All Must-read, FAQ
Mission
 Generate is a community of passionate individuals who engage in collaborative, real-world experiences to develop innovative products, the organization, its partners, and themselves.
Values
Everything in the Sherman Center must align by three values— being developmental, inclusive, and intentional.
 In addition, Generate members are innovative, driven, empathetic, spirited, and growth-oriented.
Priorities
 Structural Resilience
Increase the accessibility of leadership positions by distributing responsibilities across more of our members. Further support and foster member growth at all levels of Generate.
 Organizational Identity
Create a stronger sense of belonging within teams and branches for all members. Increase the flow of feedback between members and leadership.
 Outcome Delivery
Continue to improve our member’s learning and our project quality to ensure we can keep and capture talent and resources to ensure the organization’s continued success and longevity.

Motors
Branch: Hardware
Parent page: Electric Component Library (Electric%20Component%20Library%2014bf18dd5a94803eaa2eeed1de225989.md)
DC/Gear Motors
Stepper Motors
Networking Dashboard
Branch: Operations
Our Networking Dashboard is an internal resource containing past and current Generate member co-op and internship data. It aims to build connections and foster professional growth within Generate and alumni.
Access it here
: 
https://lookerstudio.google.com/reporting/fe0f900a-5c51-455d-9d89-d50815b114de
Make sure that you are logged into your @husky.neu.edu Google Drive account.
FAQs
Who has access to this resource?
Only current members of Generate can access this resource
How do I remove my data from this dashboard?
To remove any information, contact the Chief Data Solutions Officer, @Anna Birge. Please allow a turn around time of 48 hours for the update.
How do I add additional experiences or update existing ones?
To add any information, contact the Chief Data Solutions Officer, @Anna Birge. Please allow a turn around time of 48 hours for the update.
Where does this data come from?
Data from Fall 2024 was collected from a voluntary networking survey. From Spring 2024 onwards, data has been collected from onboarding forms. 
I have suggestions for features or a bug to report! What do I do?
Please contact @Anna Birge with any feedback! All feedback is welcome, especially bugs to report and suggestions for additional features.

New Semester Onboarding
Branch: All Generate
Tags: All Must-read
Members who were NOT in Generate last semester 
Join our Slack
 (our most important form of communication)
Request Google Drive access
 to our “
General Access Generate
” folder
Please use your 
@husky.neu.edu
 email address
Include your full name, branch, team, and role in the access request
Read our Notion
Home
Review the 
Pages
 and your team-specific pages
Check out the 
Sherman Center Notion
 for more information about the Sherm!
Complete the “All Members” onboarding
 in the next section below.
All Members 
Complete our 
Generate Onboarding Form
Complete our 
Generate Career Connections Form
In our “Sherman Center” Slack workspace:
Join 
#generate-announcements
 and 
#all-sherm-announcements
Personalize your Slack profile:
On your computer, click your profile picture at the bottom left. Then click “Profile” to edit.
Set your preferred full name, picture, role, pronouns, and 
@northeastern.edu
 email address
Set your “Team” as 
[BRANCH] - [TEAM]
, eg: 
Operations - Strategy
Send a Slack DM to your lead asking to be added to your team’s channels
Peruse the channel list (left sidebar → More → Channels) and join other public channels you’re interested in
Review our 
Pages
. 
We revised these pages with new guidelines and resources in Fall 2024, so please re-review them.

Orientation Slides F24
Branch: All Generate
Orientation Slides F24.pdf
PCB Design: Best Practices
Branch: Hardware
Parent page: Development Resources (Development%20Resources%2014bf18dd5a9480dcb4cbfec87e0cb38b.md)
Preface
This Confluence page is meant to serve as an introductory guide into the creation and manufacturing of PCB’s (Printed Circuit Boards). This guide will show you best practices and guidelines to follow when creating a PCB after completing a schematic.
1. Introduction
When creating a PCB, it is important to follow certain practices to ensure that the final product is reliable, functional, and safe. The PCB manufacturing process typically involves designing the PCB layout, selecting components, assembling the board, and testing/validating the final product.
This step should FOLLOW the creation/completion of a schematic. This is to ensure that you can import all the parts needed to meet product specifications.
2. Design Considerations
Designing a PCB layout that is optimized for manufacturing and reliability is crucial for the success of a project. Here are some design considerations to keep in mind:
PCB Layout Guidelines
Use standard PCB footprints to ensure compatibility with PCB assembly equipment
Minimize the number of vias and keep them away from sensitive components to avoid signal interference/noise
Place decoupling capacitors close to the power pins of their respective components to reduce noise and voltage fluctuations
Proper decoupling capacitor placement. It is important to also reference a ground plane through something called a “via”, which is a hole to another layer of the board
Component Selection
Choose components that are rated for the desired operating conditions (temperature, voltage, etc)
Consider the availability and cost of components when selecting them
Use components from reputable manufacturers to ensure quality and reliability
Thermal Management
Proper thermal management is essential for components that generate heat, such as power amplifiers, voltage regulators, and microprocessors
Consider the use of thermal vias, heat sinks, and thermal pads to dissipate heat and maintain component temperatures within safe operating limits
EMI/RFI Considerations
Minimize the length of traces carrying high-frequency signals to reduce electromagnetic interference (EMI) and radio-frequency interference (RFI)
Use shielding techniques such as grounded metal cans or shielding tape to reduce EMI/RFI
Don’t route traces with 90 degree bends in them
3. Assembly Process
The assembly process involves soldering the components to the PCB and ensuring that the board is functional and meets the required quality standards.
For simpler boards, assembly can be done by hand, with the engineer soldering all of the components to the board. However, for more complex boards, it becomes much harder/impossible to hand-solder certain components. In situations like these, assembly will be done by an assembly house.
Soldering Techniques
Use a high-quality solder paste with the correct particle size for the components being soldered
Use a consistent and repeatable soldering process to ensure consistent quality
Consider the use of solder paste stencils to apply a precise amount of solder paste to each component
Quality Control
Perform inspections (either visual or with a DMM) to ensure that components are properly aligned and soldered
Testing and Validation
Test the functionality of the board using appropriate test equipment and procedures
Perform environmental testing (temperature, humidity, vibration, etc.) to ensure that the board is reliable in a range of conditions
Validate that the board meets the required performance specifications
4. PCB Stackups and Layer Considerations
The number of layers in a PCB is a critical consideration that affects the cost, performance, and manufacturability of the board. Here are some factors to consider when deciding on the number of layers for your PCB.
This is a typical PCB stackup that a fabrication house will send you. A stackup will typically include layer thickness, as well as the materials that will be used.
PCB Stackups
A PCB stackup is the arrangement of copper and insulating layers that make up the PCB. The stackup is critical for determining the electrical and mechanical properties of the board. Here are some common stackups:
2-layer stackup: This is the simplest and least expensive stackup. It consists of a top layer and a bottom layer separate by an insulating layer. This stackup is suitable for simple circuits with few componets and signals.
4-layer stackup: This stackup consists of two signal layers and two power/ground planes. It provides better signal integrity and EMI/RFI performance than a 2-layer stackup, and is suitable for more complex circuits with multiple signals and components.
6-layer stackup: This stackup consists of four signal layers and two power/ground planes. It provides even better signal integrity and EMI/RFI performance than a 4-layer stackup, making it suitable for high-speed circuits and mixed-signal designs.
8-layer stackup and above: These stackups are used for very high-speed circuits and designs with multiple power domains. They can provide even better signal integrity and EMI/RFI performance than a 6-layer stackup, but they are more expensive.
Layer Considerations
When deciding on the number of layers for your PCB, consider the following factors:
Complexity of the circuit: More complex circuits require more layers to accommodate the additional components and signals.
Signal integrity: High-speed signals require controlled impedance routing and multiple layers to reduce signal reflections and crosstalk.
Power and ground planes: Multiple power and ground planes can provide better noise immunity and thermal management
Size and cost: The number of layers in a PCB affects its size and cost. More layers increases the size and cost of the board.
Manufacturing constraints: PCB manufacturers may have limitations on the number of layers that they can provide, so it’s important to check with your manufacturer before deciding on the number of layers.
Different Examples of 4 Layer Stackups
Top layer: Signal; Layer 2: Ground plane; Layer 3: Power plane; Bottom layer: Signal This stackup is commonly used for designs that have multiple power domains and require good signal integrity.
Top layer: Signal; Layer 2: Power plane; Layer 3: Ground plane; Bottom layer: Signal This stackup is commonly used for designs that have high current requirements and require good EMI shielding.
Top layer: Signal; Layer 2: Ground plane; Layer 3: Signal; Bottom layer: Ground plane This stackup is commonly used for designs that require high-speed signal routing and good EMI shielding.
Top layer: Signal; Layer 2: Ground plane; Layer 3: Signal; Bottom layer: Power plane This stackup is commonly used for designs that have mixed analog and digital signals and require good EMI shielding.
Top layer: Signal; Layer 2: Power plane; Layer 3: Signal; Bottom layer: Ground plane This stackup is commonly used for designs that have mixed analog and digital signals and require good power distribution.
It’s important to note that the choice of stackup depends on the specific requirements of the design, such as the number of power domains, signal speeds, and EMI considerations.
5. Ground Pours and Power Planes
Ground and power planes are critical components of PCB design, providing electrical and thermal stability to the board. Here are some guidelines for using ground pours and power/ground planes in your PCB design
Ground Pours
A ground pour is a large copper area on the PCB that is connected to the ground net. Ground pours are used to reduce electromagnetic interference (EMI) and to provide a low impedance path to ground. Here are some considerations when using ground pours:
Connect the ground pour to the ground pins of all components on the PCB
Keep the ground pour away from high-speed signal traces to avoid interference
Use multiple smaller ground pours instead of a single large pour to reduce the risk of a short circuit
(If 2-layer) Place ground pours on both sides of the PCB to increase the effectiveness of EMI shielding
Power Planes
Power and ground planes are large copper areas on the PCB that are used to provide a low impedance path for power and ground. Power planes are used to distribute power to the components, while ground planes provide a low impedance return path for the current. Here are some considerations when using power and ground planes.
Use power and ground planes to reduce electromagnetic interference (EMI) and to provide a low impedance path for current.
Place the power and ground planes adjacent to each other to reduce the inductance and resistance of the power distribution network.
Use multiple power and ground planes for designs with multiple power domains or high current requirements.
Place vias to connect the power and ground planes on different layers of the PCB.
Consider the thickness and conductivity of the power and ground planes to ensure they can handle the required current.
6. Vias in PCB Design
Vias are small plated-through holes in a PCB that provide a connection between different layers of the board.
Vias are used to route signals, power, and ground between different layers of the board. Here are some considerations when using vias in your PCB design:
Use smaller vias for high-density designs to save space on the board.
Consider the aspect ratio of the via (the ratio of the hole diameter to the board thickness) to ensure manufacturability.
Place vias away from high-speed signals to avoid interference.
Use blind and buried vias to save space on the board and to reduce signal reflections.
Avoid placing vias too close to pads to prevent solder wicking during assembly.
7. General Good Practice for PCB Routing
When routing a PCB, there are several good practices to follow to ensure reliable and stable performance. Here are some guidelines to consider:
Trace Width and Clearance
The width of a trace and the clearance between traces and components are critical factors in PCB design. The width of a trace determines the amount of current it can carry, while the clearance between traces and components determines the risk of a short circuit. Here are some considerations when setting trace width and clearance:
Use wider traces for higher current requirements.
Use narrower traces for signals with lower current requirements to save space on the board.
Consider the thickness of the copper layers when setting the trace width.
Use minimum clearance between traces and components to reduce the risk of a short circuit.
Increase the clearance between high-voltage traces and other components to reduce the risk of electrical arcing.
Signals Routing
Signal routing is critical for ensuring reliable and stable performance of the PCB. Here are some considerations when routing signals:
Follow the datasheet recommendations for routing high-speed signals to reduce the risk of signal reflections and crosstalk.
Use differential pairs for high-speed signals to reduce EMI and improve signal integrity.
Route signals away from high-voltage traces and components to reduce the risk of electrical arcing.
Place decoupling capacitors near the power pins of components to reduce noise and improve stability.
By following these good practices and guidelines for PCB routing, you can ensure that your design is reliable, manufacturable, and meets your performance requirements.
8. Design Rule Check (DRC)
A Design Rule Check (DRC) is an automated process that checks your PCB design for errors and inconsistencies. The DRC helps to ensure that your design meets the manufacturing requirements of your PCB manufacturer, and that your PCB will function as intended.
The DRC checks your design against a set of rules that you define. These rules can include parameters such as minimum trace width, minimum trace spacing, minimum drill size, and many others. The DRC will flag any errors or violations of these rules, allowing you to correct them before you send your design to the manufacturer.
Creating a DRC in KiCAD is a straightforward process. Here are the steps to create a DRC:
Open your PCB design in KiCAD and click on "Tools" in the menu bar.
Select "Design Rule Checker" from the drop-down menu.
In the DRC window, you can define the rules for your design. For example, you can set minimum trace width, minimum trace spacing, and minimum drill size.
Once you have defined your rules, click "Run DRC" to check your design for errors and violations.
The DRC will flag any errors or violations of the rules you have defined. You can then make the necessary changes to your design to correct these errors.
It is important to run a DRC before sending your design to the manufacturer. This will help to ensure that your design meets the manufacturing requirements of your PCB manufacturer, and that your PCB will function as intended. Running a DRC can save you time and money in the long run, by catching errors early in the design process.
9. Getting Your PCB Manufactured
Once you have completed your PCB design, the next step is to get it manufactured. There are many PCB manufacturers to choose from, including online PCB fabs such as JLCPCB, PCBWay, and OshPark. Here are some steps to follow to get your PCB manufactured:
Generate Gerber files: Gerber files are the industry standard file format for PCB manufacturing. They contain the information needed to produce the PCB, including the copper layers, solder mask, and drill files. Most PCB design software packages have built-in Gerber file generation tools.
Check your design: Before submitting your design to the manufacturer, it's important to double-check your design for errors or mistakes. Check that all the connections are correct, that there are no overlapping traces, and that the design follows the manufacturer's design rules.
Place an order: Most PCB manufacturers have an online portal for submitting orders. You will need to specify the number of PCBs you need, the type of board material, the board thickness, the number of layers, the copper weight, and other details.
Upload your Gerber files: After placing your order, you will need to upload your Gerber files to the manufacturer's website. Be sure to include all the necessary files, including the drill files and any special instructions or notes.
Review the design: Once you have submitted your files, the manufacturer will review your design to ensure that it can be manufactured. They may contact you if they have any questions or concerns.
Payment and shipping: After your design has been reviewed and approved, you will need to pay for the order and provide a shipping address. The PCBs will typically be manufactured and shipped within a few days.
In addition to Gerber files, some manufacturers may also require other file formats such as Excellon drill files, pick-and-place files, and assembly drawings. Be sure to check with the manufacturer to confirm which files are required.
By following these steps, you can get your PCB manufactured and bring your project to life.
10. Additional Resources
Here are some additional resources that you may find helpful for creating a PCB in KiCad:
KiCad Tutorial
 by Chris Gammell: 
https://www.youtube.com/watch?v=1AXwjZoyNno
These YouTube video tutorials provide a comprehensive guide to using KiCad for PCB design. By watching these videos and following along with the examples, you can learn the fundamentals of PCB design in KiCad and create your own custom PCBs.
KICAD PCB Editor Explained:
KiCad PCB Editor Interface and Layer Overview
KiCad PCB editor is a powerful tool that provides a variety of features to help you design a professional-quality printed circuit board. Here are some of the key buttons and tools in the KiCad PCB editor interface:
Important Buttons to Know:
Place Component:
 This button allows you to place components on the board. You can select a component from the library browser and place it on the board by clicking on the desired location.
Add Track:
 This button allows you to add a new track to the board. You can specify the start and end points of the track, and KiCad will automatically route the track between them.
Add Via:
 This button allows you to add a new via to the board. A via is used to connect a trace on one layer of the board to a trace on another layer.
Add Text:
 This button allows you to add text to the board. You can specify the text content, font, size, and location.
Design Rule Check (DRC):
 This button allows you to run a design rule check on your board. The DRC checks your board against a set of predefined rules to ensure that it meets certain design criteria.
What Each Layer in the PCB Board Editor Means:
Top Layer:
 This is the layer of the board that is visible from the top. It typically contains the component footprints and the traces that connect them.
Bottom Layer:
 This is the layer of the board that is visible from the bottom. It typically contains the ground and power planes, as well as additional traces.
Silk Screen:
 This layer is used to provide additional information about the board, such as component outlines, reference designators, and other text.
Top Silk Screen:
 This is the silk screen layer that is visible from the top of the board.
Bottom Silk Screen:
 This is the silk screen layer that is visible from the bottom of the board.
Board Outline:
 This layer defines the outline of the board. It is used to specify the shape and size of the board.
Solder Mask:
 The solder mask layer is used to define areas where solder mask material will be applied to the board. The solder mask is a protective layer that prevents solder from flowing where it is not supposed to during assembly. The solder mask layer is typically colored green, but other colors are possible.
Top Paste:
 The top paste layer is used to define the areas where solder paste will be applied to the board during assembly. The solder paste layer is typically used for surface mount components that are attached to the top layer of the board.
Bottom Paste:
 The bottom paste layer is used to define the areas where solder paste will be applied to the board during assembly. The solder paste layer is typically used for surface mount components that are attached to the bottom layer of the board.
Drill File:
 The drill file is used to define the locations of the holes that will be drilled into the board during fabrication. This file provides the manufacturer with the precise dimensions and locations of each hole.
Board Outline:
 The board outline layer is used to define the shape and size of the board. The board outline is typically a closed polygon that defines the outermost perimeter of the board.
Mechanical Layers:
 Mechanical layers are used to add additional information about the board, such as mounting holes, cutouts, and other mechanical features. These layers are typically used to provide additional information to the manufacturer about how the board should be fabricated.

Parts Selection
Branch: Hardware
Parent page: Development Resources (Development%20Resources%2014bf18dd5a9480dcb4cbfec87e0cb38b.md)
There are many different factors to take into consideration when selecting electrical components to put into a project. These include:
Price
The most obvious factor, make sure whatever you are buying is in your price range. Most components tend to be very cheap (a few cents per component to a few dollars), making it a good idea to buy them in bulk to reduce the amount of money sent on shipping costs. More specialized components, however, can be more expensive, ranging up to hundreds of dollars.
Size
You need to make sure that whatever component you select will fit onto your circuit board. If you are buying components for a PCB, for example, make sure that the PCB is modeled around those components. As a general rule, the higher power the component is, the larger it will be.
Mounting Type
Components come with all different kinds of mounting structures, such as through-hole, surface-mount, etc. Most components you have used so far have likely been through-hole components (there are two metal rods emerging from either end of the component that can be plugged into a breadboard or soldered onto a PCB). However, if you're looking for a cleaner, more compact design, surface-mounted components could be beneficial to look into for PCBs.
Lead Time
If components are not in stock, there will be a timeframe on the page that says "Lead Time". This is the amount of time it will take to manufacture and ship out more of these components. Most components have a lead time of at least a couple of months, so if a component is out of stock and has a long lead time, it may be more beneficial to try and find another option.
Power Rating
The power rating will dictate how much voltage and current can travel through your component. If you need your component to be able to handle 200V DC, make sure you look for that. If you need your component to be powered by a 12V DC battery, make sure you don't choose a component that has a lower maximum voltage rating. The power rating(s) of your component(s) will dictate both what components and what power sources you can use.
To find components, usually just searching the object you need should suffice (ie "50V 10k resistor"). Some good sites to buy components off of include 
Mouser
, 
Digi-Key
, 
Adafruit
, etc.
Passive Networking
Branch: All Generate
Statement
Generate is actively looking to expand and diversify the applicant pool for future semesters. One audience we have not tapped into enough is our physical network. Together, let us take initiative to promote Generate verbally.
What does passively networking look like?
If you find yourself in a conversation with someone looking for club recommendations, driven & growth-oriented circles, or a community of builders, let them know that we exist! Talk about…
Who we are
: the student-led product development studio on campus that takes clients, entrepreneurs from Northeastern’s extended network and the Boston area, and builds their product for them
Opportunities
: Engagement, Hardware, Operations, Software—a place for all majors
Values
: driven, empathetic, growth-oriented, innovative, spirited
Do not worry if you cannot remember all of that! Any non-empty subset of those details is sufficient.
Also, if you find yourself with someone who seems like a great fit for Generate, tell them to apply!
Do NOT force someone to listen to you pitch Generate. The indicators for when it would be a great time are provided above.
Power Supplies
Branch: Hardware
Parent page: Electric Component Library (Electric%20Component%20Library%2014bf18dd5a94803eaa2eeed1de225989.md)
Analog to Digital Voltage Adapters
| Name | Use In / Use Case | Link |
| --- | --- | --- |
| 12V 100A 1200W DC 
Switching Power 
Supply Adapter | AutoPasser
 | 
12V 100A 1200W DC Switching Power Supply Adapter PSU AC-DC 12Volt Industrial Transformer Converter 0-80/50amps LED Drive Lamp Meter Semiconductor Motor Pump Winch Stereos Amplifier Fan SMPS 110V/220V
  |
| Enclosed AC DC Converters 2 Output 48V 5V 85 ~ 264 VAC, 120 ~ 370 VDC Input | Fufu Pot | L
MF1500-20B48 | DigiKey Electronics
 |
| New Version DC 12V 100A 1200W Power Supply Adapter 110V AC to 12V DC Converter Power Supply 12V 100A Switch Transformer for Motor Pump CCTV Security Camera Car Stereo 3D Printer and More 12V Device | SEBIK | 
New Version DC 12V 100A 1200W Power Supply Adapter 110V AC to 12V DC Converter Power Supply 12V 100A Switch Transformer for Motor Pump CCTV Security Camera Car Stereo 3D Printer and More 12V Device
  |
Batteries
| Name | Used In / Use Case | Link |
| --- | --- | --- |
| Ebike Battery 48V 52V 60A 72V 10AH 18AH 20AH 30AH 50AH Lithium Ion / LiFePO4 Battery Pack with 3A/5A Charger,50A/80A BMS for 300W-4500W Motor | WaveWise | 
BtrPower Ebike Battery 48V 52V 60A 72V 10AH 18AH 20AH 30AH 50AH Lithium Ion / LiFePO4 Battery Pack with 3A/5A Charger,50A/80A BMS for 300W-4500W Motor
  |
| H HAILONG 48v 36v Lithium Battery/36V Ebike Battery, ebike Battery 10AH 14AH 20AH 25AH with 2A Charger, T-Plug, XT60 Connector and 20A BMS for 250W-800W Ebike Battery/Ebike Kit | Cstar | 
https://www.amazon.com/dp/B0CBTWDKJM/ref=sspa_dk_detail_1?pd_rd_i=B093STJTGB&pd_rd_w=yu2rx&content-id=amzn1.sym.d81b167d-1f9e-48b6-87d8-8aa5e473ea8c&pf_rd_p=d81b167d-1f9e-48b6-87d8-8aa5e473ea8c&pf_rd_r=Z4XV0EPQ8E6GFMDJH3N4&pd_rd_wg=8Riqf&pd_rd_r=84b09a74-f14b-47f0-a2a3-c31271da009b&s=sporting-goods&sp_csd=d2lkZ2V0TmFtZT1zcF9kZXRhaWxfdGhlbWF0aWM&th=1
  |
Procurement + Reimbursements
Branch: Operations
Tags: FAQ, Leads/Chiefs Must-read
Over the course of your time in Generate, you will likely need to purchase 
something
. Perhaps a tool for a hardware project, stickers for an engagement event, a subscription for a software client, or catering for a morale event.
 This guide is designed to help you understand our policies and procedures for making Generate-related purchases. If you have questions, ASK! → `#ops-help` on Slack.
Procurement / Online Orders
 Key Takeaways:
- All orders/procurement requests must be submitted via our [FinOps Dashboard](https://finops.generatenu.com).
- Plan ahead and know what items will need to be purchased as soon as possible. See [When are orders placed?](Procurement%20+%20Reimbursements%205e02a4837a6b424990237b436dce066a.md) to ensure your orders are submitted on-time.
- Routinely connect with your lead to ensure that your team’s resources are effectively allocated and in-line with your needs.
- If you are a Director, Chief, or Lead, please make sure you also familiarize yourself with [Digital Stewardship](Digital%20Stewardship%2039a51d1e3f4447419eb43c4d9601167d.md)
- TO SUBMIT AN ORDER, submit a request through our [FinOps Dashboard](https://finops.generatenu.com/orders/new).
FAQs:
What are our supported vendors?
Supported vendors must be used whenever possible. We have tax-free accounts set up with these services and your items will be processed and arrive faster.
eBay is no longer a supported vendor.
4imprint
Adafruit
Amazon
AndyMark
Arduino
Custom Ink
DigiKey
EasyEDA
Edmund Optics
Formlabs
Harbor Freight
Home Depot
McMaster-Carr
Misumi
Mouser Electronics
Prolabs
Protolabs
SendCutSend
ServoCity
Sparkfun
Stepper Online
Sticker Mule
ULINE
US Plastics
Vevor
Vex Robotics
Vistaprint
WaveShare
Xometry
What if I want to place orders from other vendors?
Please use custom orders sparingly as they take much more time to set up.
In some cases, we are not able to order from certain vendors. See “
How does tax-exemption work?
” above for one potential issue.
Be aware that issues are common with custom orders.
When are orders placed?
The Fall 2024 schedule requires all procurement/order requests to be submitted by 
7:30pm every Tuesday and Thursday
 to ensure same-day ordering. Reach out in 
#ops-help
 on Slack with any questions in the meantime.
Any orders not received on time will be submitted at the next scheduled date.
Where are orders shipped? Can my order be shipped to me?
Orders may only be mailed to the Sherman Center. If necessary, orders may be shipped to the relevant lead following approval from Generate’s CFO or Operations Director.
How does tax-exemption work?
As a part of Northeastern University—and therefore the Sherman Center—we are tax-exempt
.
If a company is unwilling to remove sales tax, we cannot order from them. No exceptions.
What if I have an urgent order? / I need something ASAP!
An order is “urgent” if there is a legitimate, justifiable reason that it absolutely cannot wait to be placed until the next order date. See 
When are orders placed?
If the need for an urgent order arises, reach out in 
#ops-help
 on Slack explaining the situation. Be sure to tag 
both
 Generate’s Operations Director and Chief Financial Officer. They will determine whether the urgent order is necessary.
The Operations Director and CFO reserve the right to deem orders as urgent or non-urgent in their sole discretion.
 In most cases, weekend and holiday orders cannot be expedited due to the business nature of most vendors we utilize. Please consider this in your urgent request before reaching out.
How do I process a return?
Policies and timelines vary by vendor. The receiving team is responsible for notifying Operations on Slack (
#ops-help
) about the return to obtain the necessary labels. Please provide the original order ID and a description of all items to be returned. The receiving team is responsible for boxing and shipping out the return.
Reimbursements
Generally, all morale purchases must be paid for out-of-pocket and then reimbursed. 
Project materials should 
never
 be bought out-of-pocket.
 Key Takeaways:
- Reimbursements requests must be submitted within 14 days of purchase.
- Keep your itemized receipt! Without it, you cannot be reimbursed.
- Reimbursements over $75 require prior approval from Generate’s CFO or Operations Director, unless morale-related.
    - Failure to do so may result in rejection of your reimbursement request.
- Pay attention, and triple check your requests. Incomplete, inaccurate, or late submissions may be rejected and non-reimbursable.
- TO SUBMIT A REIMBURSEMENT, submit a request through our [FinOps Dashboard](https://finops.generatenu.com/reimbursements/new).
FAQs:
What can be reimbursed?
Morale
: Unless otherwise communicated, all 
morale
 expenses should be paid out-of-pocket and reimbursed by Generate.
Urgent Project Materials
: 
If approved by your Director
, urgent project materials 
$75 or less
 may be purchased out-of-pocket and reimbursed by Generate. Urgent project materials over $75 must be approved by Generate’s CFO or Operations Director. 
All other project material purchases must flow through our standard procurement policies
.
What is required?
Reimbursement Requests must…
be submitted 
within 14 days
 of the purchase.
include a 
PDF
 of an 
itemized receipt
 showing the vendor name, purchase date, items purchased, total price, and payment method.
Please take 2 extra seconds to find a clean and flat surface, take a clear picture, and crop photos to show just the receipt.
How long do reimbursements take?
Reimbursement requests take time. They must be processed by Generate, the Sherman Center, and Northeastern University, as well as either the USPS (physical checks are mailed if you don’t have direct deposit set up) or your bank.
Please be patient; this process usually takes 
3-4 weeks
.
Questions or Issues?
Reach out in 
#ops-help
 on Slack. We’re here to help!
Project Management Tools
Branch: Hardware
Parent page: Additional Resources (Additional%20Resources%20150f18dd5a9480b08e9debbd72440983.md)
If you have no idea where to start, and just want some software to help you organize your team, this page is for you! The recommendations go roughly in order from simplest to most powerful, but each has their own merits and reasons to choose one over another.
 
Click one of the links to jump to that tool
Google Sheets
In Google Sheets, you can use a Project Tasks table template to note every task that needs to be completed, by whom, and its priority. Then you can filter, slice, and pivot the table however you need. It’s a very flexible solution, and most people on your team have likely used Google Sheets already.
Google Sheets: Online Spreadsheets & Templates | Google Workspace
Trello
Kanban boards are helpful for seeing the status of all tasks for your project at a glance. Trello lets you build a team, assign tasks, and adjust their statuses while also including notes and details about each task in its card. They have a template to get you started, but it’s quite flexible and customizable too once you’ve learned what you need.
Project Management
Smartsheet
If just columns and cards don’t provide enough functionality, Smartsheet lets you rollup your data in many different ways— from Gantt charts to outlines to Kanban boards to tables! They have templates to get you started, and you can customize from there! 
Simple Agile Project
Notion
If you want to build from scratch, Notion has all the components you need— and everyone in Generate already has an account! Like Smartsheet, you can create many views based on the same task data.
From feature idea to launch in one tool

Rethinking the Sherman Center 
Branch: Sherman Center
Tags: All Must-read, FAQ
‣
Running Meetings
Branch: Software

Running a Design Meeting
Branch: Software
Parent page: Running Meetings (Running%20Meetings%20a9e22541dedd4d0c8ebef43c89521ea6.md)
Agenda (1 hour)
Brand work (15 mins)
Any required brand work is assigned, reviewed, discussed, and assigned
 Features ≠ Enablers; Features are work to be done that contributes to the end product. Enablers are work that contributes to the team’s future ability to complete work.
Critique (45+ mins)
Each designer shares the work they completed in the past week and others share area for improvement in addition to positive feedback
Next steps
Any decisions required to complete the next week’s work are made before designers leave.

Running a Frontend ↔ Design Audit
Branch: Software
Parent page: Breaking Silos (Breaking%20Silos%202d26a01f9689444bbb069f20491b80ac.md)
Before any Features are merged from Development → Production they should undergo a 
Design Audit
:
Engineers complete the development of the Feature
Engineers notify the designer and set up a time to Demo and review
Designer and Engineer walk through the completed feature together, alongside the Figma designs, and identify necessary improvements (as required):
→ Necessary improvements are noted and added to the Squad’s backlog for the next week
→ If an improvement is deemed too time-intensive, the proposed changes can be discussed with Leads, Chiefs, and other team members.
The designer approves the implementation and the feature is merged into Production (assuming it also meets code quality standards).
 This is a perfect use of Squad meetups in team meetings, or team channels for members to show their work and receive feedback on it. 
Note: if doing this in a team meeting, having a paper trail is a great way to make sure all the feedback is adequately recorded

Running a Leads (PL/TL/DL) Meeting
Branch: Software
Parent page: Running Meetings (Running%20Meetings%20a9e22541dedd4d0c8ebef43c89521ea6.md)
Agenda (15 mins)
PL updates DL and TLs on client developments and feedback from client based on work showcased (5 mins)
DL updates TLs and PL on design progress and clarifies any needs from PL and TLs (5 mins)
TLs update DL and PL on implementation progress and clarify any needs from PL and DL (5 mins)

Running an All-team Meeting
Branch: Software
Parent page: Running Meetings (Running%20Meetings%20a9e22541dedd4d0c8ebef43c89521ea6.md)
Example Agenda (30 mins)
Bonding activity (10 mins)
Priority updates (5 mins)
Each lead updates the whole team on immediate and upcoming priorities. PL shares important features, what features and deadlines are upcoming.
Feature updates / assignment (5 mins)
Each squad shares progress on their current feature, PL updates backlog to reflect progress
Squads allocate themselves to new features (as makes sense)
 Features ≠ Enablers; Features are work to be done that contributes to the end product. Enablers are work that contributes to the team’s future ability to complete work.
Alignment time for squads (10 mins)
In each squad, required alignment takes place to understand needs between design and engineering to deliver their assigned feature(s).
Squads consult DL/TL for technical guidance, PL for business guidance.

Running an Engineering Meeting
Branch: Software
Parent page: Running Meetings (Running%20Meetings%20a9e22541dedd4d0c8ebef43c89521ea6.md)
Example Agenda (45 mins)
Enabler prioritization and assignment (10 mins)
Team discusses most important Enablers to build, allocate work on building amongst themselves.
 Features ≠ Enablers; Features are work to be done that contributes to the end product. Enablers are work that contributes to the team’s future ability to complete work.
Code review (30 mins)
Review any code being merged from Feature branches into Dev; team discusses how to improve code and design quality
Blocker removal (5+ mins, team members may leave if they have no out-standing blockers)
Team members discuss any blockers which need to be removed so that the engineers can continue to complete work

Schematic Best Practices
Branch: Hardware
Parent page: Development Resources (Development%20Resources%2014bf18dd5a9480dcb4cbfec87e0cb38b.md)
“Electricity is really just organized lightning” - George “Andrew Abrego” Carlin
Preface
This document will show you how to set up your KiCAD schematic pages to look as professional as possible, as well as give you some good design practices when implementing circuitry.
Keeping Your Schematic Organized
Selecting the Correct Page Size
Typically when you begin a schematic, KiCAD will open a page that resembles the following:
KiCAD schematics generate with a 
Size A
 page by default, which most of the time will be too small to fit a significant amount of circuitry on.
We can change this by zooming in on the box in the bottom right of the schematic page and selecting the box related to page size.
Clicking this box will open a menu where you will be able to alter the page size of the schematic. Industry-standard schematics are 
Size B
, although in certain situations will go up to 
Size C or D
.
Make sure to also fill out the Issue Date, Revision, and Title fields
Schematic Organization
Organize your schematic by functionality
Organization of power architecture in a KiCAD schematic
One of the main goals when creating a schematic is to allow other engineers to easily read and understand the work that you’ve done, and interpret (from a circuitry standpoint) the purpose of each part of the circuit. One of the ways that we can do this is by 
grouping components by functionality
.
Grouping components by functionality
 means organizing your schematic in such a way that all IC’s and passive components (Resistors, Capacitors, etc) are grouped together. Popular grouping includes the following:

Power architecture: How your project is powered:
- This page should include callouts as to how much power is being used and the current draw on each of the power supplies
As we can see from the image above, the voltage levels that the IC’s are regulating are called out explicitly in blue (1.2V and 3.3V switching supplies)
Shown below is another good example of useful notes to include when listing out power architecture
This image shows both USB-C power transfer circuitry as well as architecture to regulate voltage. Pay attention to how the notes in blue and red 
call out exactly what the circuit does and what voltage level it is operating at or regulating.

Control architecture:
- Another common way of organizing a schematic is having differente sections dedicated to different methods of control.
- Examples of this include having anything that is on a shared I2C line or anything that exists as its own architecture (such as a microcontroller and associated passive components) in their own sections
As we can see from this image, the power supply LDO IC, MCU, and header pins are all placed close to one another and have their nets labeled. This helps us to identify which pins go where.
Reference Designators
Another important thing to consider when designing a schematic is having clean and consistent labeling for the various components and ICs. This includes:
Using proper reference designators for all components. Here are some of the most common reference designators that you might encounter in Generate, along with other information that should be visible:
R:
 Resistor (resistance value)
C:
 Capacitor (capacitance value and voltage rating)
L:
 Inductor/ferrite bead (inductance value and voltage rating)
U/IC:
 Integrated Circuit (IC), U is more common, but IC is still acceptable (part number and manufacturer)
Q:
 Transistor (part number)
J:
 Terminal/connector (part number)
B:
 Battery (part number and voltage rating)
D:
 Diode (part number)
S:
 Switch (part number)
TP:
 Test point
Making sure that reference designators are in visible locations, and are not covered by other text or symbols
Ground and power lines should be indicated with power flags
Ground flags should always point down
Power flags should always point up
Other Important Considerations
The following tips are important considerations to take into account when designing schematics, but are not large enough to warrant their own sections (but are however, still crucial to follow when designing a schematic)
Ensure that every net has a meaningful name. Also, keep net names reasonably short and only use uppercase letters
A net is the connection between the pins of two or more devices
When doing layout, the software will use the nets from the schematic to determine which pins on which devices will be allowed to connect to each other
If pins that are supposed to be connected are labeled with different net names, the layout software will not allow you to connect the pins together (technically you can manually override this, but it’ll still throw an error when checking the layout
This image shows a schematic where every net is named, meaning that connections will be made between the pins with the same nets
Arrange pins according to function: It’s ok for the schematic symbol for a component not to match exactly with the footprint of the part if it means that the schematic will be neater or easier to understand
Direct connections should be used when reasonable (ie when drawing lines directly from pin-to-pin won’t result in the schematic being harder to understand). Otherwise, use net names to keep the schematic neat and easy to understand.
If you are using any chips that utilize I2C for communication with a main microcontroller, be sure to call out the specific I2C address that the device uses
Example Schematics

Sherm Access Not Working
Branch: Operations
Tags: FAQ
If you notice a keycard reader isn’t working, 
please let someone know
 so we can diagnose the issue and quickly resolve it. A few things to try to help escalate … 
Understand if it’s an issue with 
your
access
, or with 
everyone’s
access
:
If it’s an issue with your access, please log into the 
Generate Ops Dashboard
 to check if you have been added to the access list for the spaces. This issue is common at the start of a semester.
If the Dashboard says you have access, but you are experiencing an issue that no one else is, please send a message in 
#ops-help
 on Slack. Be sure to mention the space you are trying to access and what behavior you are seeing.
If others also have the issue, and the keycard reader is 
not flashing red or green or making a beep when reading a card
, it’s likely the reader is 
out of battery
. 
In this case:
Please send a message in 
#ops-help
 on Slack
Additionally, please 
submit a work request
here
:
Problem Type:
 Locks, Keys and Card Access
Campus:
 Boston
Building name:
 Hayden
Floor:
 0 | Basement
Room number:
 008 | Private Circulation Area
Location within room:
 Front door
Description:
 Door keycard reader requires AD400 battery change.
Thank you for helping us maintain access to the space! 
Sherm Hub 
Branch: Sherman Center
Tags: FAQ
Software Installation and Setup
Branch: Hardware

Spaces + Reservations
Branch: Operations
Tags: FAQ, Leads/Chiefs Must-read
FAQs
What can spaces be booked for?
After 5pm, please avoid scheduling 1:1s in Sherm spaces. Feel free to use an available room if you see it though.
Six (6) or more people?
 Keep meetings to 45 minutes or less.
Who can book spaces?
Directors, Chiefs, and Project Leads (PLs).
If you are a general member, reach out to your lead to reserve a space if needed.
When can spaces be booked?
Anytime you want! Spaces are available for bookings 24/7.
I should have access, but I don’t. Help?
Log into 
Generate’s FinOps Dashboard
 and confirm that you have completed all necessary onboarding steps and have been granted access. If you have questions or further issues, reach out in 
#ops-help
 on Slack.
Available Spaces
007A: Corner Room
 [All Sherman Center]
Seats 6-8 people
MINIMUM
: 6-person team
Access
: Use the key in the Sherm Lobby, directly under the shelves by the printer. 
Wrap the key around your backpack once you enter to ensure you don’t leave it in the room.
Amenities
: 2 couches, 2 chairs, TV, whiteboard wall
008B: Sherm Conference Room
 [All Sherman Center]
Seats 12+ people
MINIMUM
: 8-person team
Access:
 All Sherman Center members have access through the Lobby.
Amenities
: conference table, 12 chairs, TV, videoconference equipment, whiteboard
010A: Big Studio One
 [Generate only]
Seats 10+ people
MINIMUM
: 8-person team
Access:
 Generate students have keycard access.
Amenities
: table, 10 chairs, TV
010B: Little Studio One
 [Generate only]
Seats 5+ people
Access:
 Generate students have keycard access
Amenities
: Table, 5 chairs, videoconference equipment, TV, whiteboard wall, beanbags
010D: Makerspace Mini
 [All Sherman Center]
Seats 5 people
Access
: This space is only open to those with Makerspace access. See ‣.
Amenities
: table, 5 chairs, TV, whiteboard wall
How to Book Spaces
 Only Directors, Chiefs, and Project Leads (PLs) can book spaces. Reach out to your team leader to reserve a space if needed.
Booking Spaces via Outlook
Launch Outlook and navigate to the Calendar by selecting the 
Calendar
 icon
Click on 
New Event
 from the top menu. This will open a new event window.
Add Meeting Details:
Specify a 
Title
 and the 
Date
 and 
Time
 for your meeting
Add attendees if required by typing their name or email in the 
Invite
 field.
Select a Room/Space:
Click on the 
Location
 or 
Rooms
 button (depending on your version of Outlook). This will open a dialog box where you can search for available rooms or spaces
These are the rooms available to book:
HA-010A-RR (Big Studio)
HA-010B-RR (Little Studio)
HA-010C-RR (Makerspace)
HA-010D-RR (Makerspace Mini)
HA-007A-RR (Corner Room)
HA-008B-RR (Sherman Center Conference Room)
If there is a green checkmark  near the room, it 
is
 available at that time! However if there is a red X  then the room is already booked and unavailable during that time.
Send the Meeting Request:
Once everything is set, click 
Save
 to finalize the booking
The room will receive the meeting request, and if it’s available, the booking will be confirmed automatically
Booking Spaces via Robin
First time booking a space through Robin?
 Watch 
this video
.
Log into 
Robin
, Northeastern’s room booking system. Click “Continue in with Single Sign-On” if you aren’t already logged in, and use your Northeastern credentials.
Find Hayden Hall > 00-Basement 
If no spaces on this Hayden Hall → 00-Basement are highlighted in green
, you 
do not have access
 to book rooms.
Select the Date and Time that you would like to make your booking for and click “Find a Space”
You can select different spaces based on:
Amenities
: TVs, whiteboard, number of chairs, etc. This is helpful if you need a room with a whiteboard, etc.
Capacity
: Any, 1-2, 3-5, 6-8, 9+. This is helpful for larger team sizes.
 Please 
be considerate
 of your fellow members by practicing 
good stewardship
 of our shared spaces. If you need a room for a meeting with three people, and a four person room is available, please choose that room rather than one which can seat eight.
Find the Room and Time that best suit your booking needs.
 If you do not see a time that works for you, that means that the room is already reserved on that date and time. Try another location.
Enter a Title for your booking. Examples: WaveWise Weekly Team Meeting; Engagement Leads Meeting 
Notes/Reminders
Invite guests
: this will send an email to all guests so they can easily add the meeting and location to their calendar.
If the meeting is a recurring meeting (once every week, once every other week, etc.), you must make it reoccurring with an end date.
You will get an email CONFIRMING the booking. If it is declined, that means the booking did not go through, likely because of a conflict with another booking
To see which rooms are available at which times:
Click on “Schedule” 
Click on “Meeting rooms” 
Be sure to look under Hayden Hall → 00-Basement
Questions or Issues?
Reach out in 
#ops-help
 on Slack. We’re here to help!
Suggested Meeting Cadence
Branch: Software
Parent page: Running Meetings (Running%20Meetings%20a9e22541dedd4d0c8ebef43c89521ea6.md)
| 
Meeting
 | 
Frequency
 | 
Duration
 | 
Personnel
 | 
Description
 |
| --- | --- | --- | --- | --- |
| All-team | Weekly | 30 mins | All team members | 
Whole team aligns
, eradicates shared blockers, bonds |
| Engineering | Weekly | 15-60 mins | All engineers, 
PL optional
 | Engineers 
remove technical blockers
, agree new on necessary tech enablers (automations, CI/CD fixes, standards, etc.), 
conduct code review
 |
| Design | Weekly | 60+ mins | All designers, 
PL optional
 | Share completed assignments, receive feedback, brainstorm ideas, 
make design decisions to move forward,
 assign new work |
| Leads | Weekly | 10-30 mins | PL, TLs, DL | Leads align on progress, requirements, next work priorities |
| Working Session | As needed | 120+ mins | All team members, 
PL optional
 | Team completes allocated work. User testing. |
Team Structure for Collaboration
Branch: Software
Parent page: Breaking Silos (Breaking%20Silos%202d26a01f9689444bbb069f20491b80ac.md)
Below is a diagram of how teams are set up into multiple streams to complete work for the project. 
Feature Squads are made of at least one designer, one frontend-focused developer, and one backend-focused developer. 
Together, these cross-disciplinary teams complete Stories, written by the PL, (aka Features).
Engineering/Design Chapters are made of either all the engineers or all the designers on a team. 
Together, Chapters work on Enablers, written by the TLs/DL, to complete work which helps the team better complete its work. This can include Brand Identity, Logos, Typography, Figma Component/Swatch setup, on the design side, and CI/CD, linting, automations, system architecture design, etc. on the engineering side.
The goal of this model is to get people to work together better than if each of them worked alone. 
Over management and/or bad management means people do less than they could have alone. 
On the flip-side, “just enough” management means people do their best (and feel their best doing it)

Upcoming Events!
Branch: All Generate
Tags: All Must-read
 Events with a `?` are still tentative: many events are yet to have times and locations announced, but this page will be updated when they are.
 Please Slack @Chirag if you’re planning an event, so it can be added to the calendar and so that Engagement can help you with logistics.
Generate Event Calendar [Public]
Use Slack Effectively
Branch: Engagement
Tags: All Must-read
 Use threads for larger discussions

Threads allow us to keep discussions organized and easier to follow for all stakeholders
 React so people know you read their messages
 — 
have fun with them!
Think of Slack like a groupchat → we’re all here for a good time!
 Organize your sidebar
 — this makes it easier to stay on top of messages
 Set up notifications for important channels
Your 
team
 channel
Your 
branch
 channel
generate-announcements
all-sherm-announcements
Use “Save for Later” and “Remind me about this”
 to come back to important discussions that you can’t get to right now
Learn more about how to use this feature: https://slack.com/help/articles/360042650274-Save-messages-and-files-for-later
Save for later

There is also a sidebar for all the items you saved for later!
Remind me about this

Voltage Regulation
Branch: Hardware
Parent page: Electric Component Library (Electric%20Component%20Library%2014bf18dd5a94803eaa2eeed1de225989.md)
Buck Converters
| Part | Used On/Use Case | Voltage Regulation | Link(s) |
| --- | --- | --- | --- |
| PLMR38020FDDAR | Fufu Pot | 12V - 5V
48V - 12V/16V
4.2V - 80V Voltage Range
2A Output Current | 
Texas Instruments LMR38020SDDAR
 |
| LM2576HVS-5.0_NOPB | WaveWise | 1.23V - 37V Input
Up to 57V for HV Version
Fixed 5V Output
3.3-V, 5-V, 12-V, 15-V Versions Available
3A Output Current | 
LM2576HVS-5.0/NOPB
LM2576HVS-5.0/NOPB | DigiKey Electronics
 |
Fufu Pot
WaveWise 
Low-Dropout Regulators (LDOs)
| Part | Used On / Use Case | Voltage Regulation | Link(s) |
| --- | --- | --- | --- |
| TPS785-Q1 | Fufu Pot | 1.7V - 6.0V Input
1.2V - 5.5V Output
1A Output Current | https://www.mouser.com/new/texas-instruments/ti-tps785-q1-ldo-regulators/
TPS785-Q1
 |
| AP1117E15L-13 | Muscle Recovery | -0.3V - 18V Input
1.5V, 1.8V, 2.5V, 3.3V, 5.0V Output
5mA-10mA Output Current | 
AP1117E15L-13 | DigiKey Electronics
ADP3339AKCZ-3.3-RL
 |
| MAX604CSA | HiddenLock | 2.7V - 11.5V Input
3.3V, 5V, Adjustable Output
500mA Output Current | 
Analog Devices Inc. MAX604CSA+
MAX604CSA
 |
Fufu Pot 
Level Shifters
| Part  | Used On/Use Case | Voltage Regulation | Links |
| --- | --- | --- | --- |
| TXB0108PWR | AutoPasser
WaveWise | 1.2V-3.6V to 1.65V-5.5V (Bidirectional)
50mA Input/Output Current | 
TXB0108PWR
TXB0108PWR | DigiKey Electronics
 |
AutoPasser 
WaveWise 

Writing and Assigning Features (Stories) and Enablers (Tickets)
Branch: Software
Parent page: Breaking Silos (Breaking%20Silos%202d26a01f9689444bbb069f20491b80ac.md)
When writing Stories/Tickets, describe outcomes instead of prescribing methods. 
For example, A) “Make a thing that does this, here’s some possible approaches if you’re really stuck on where to start” is markedly better than B) “Do x y then z”. A describes a desired outcome which the Squad can think critically about how to achieve. B describes an output which requires no complex thought to achieve and stifles autonomy and creativity, as such preventing your team from achieving their full potential.
When it comes to allocating work, do not assign specific people specific tickets. Instead, let them pick tickets which they want to learn from/feel prepared to complete. 
If nobody wants to pick up a Feature Story/Enabler Ticker, then it either needs to be broken down further, spiked (researched to be broken down), or nobody views it as important and thus you need to sell the importance better or realize it’s not valuable (and then cancel it and communicate its cancellation to your client)
Empower the talented people you hire and lean on them to make key decisions and guide your project.