{
  "Questions": [
    {
      "id": 1,
      "Question": "How to run an all team meeting?",
      "Answer": "Each lead updates the whole team on immediate and upcoming priorities. PL shares important features, what features and deadlines are upcoming. Each squad shares progress on their current feature, PL updates backlog to reflect progress. Squads allocate themselves to new features (as makes sense). Features ≠ Enablers; Features are work to be done that contributes to the end product. Enablers are work that contributes to the teams future ability to complete work. In each squad, required alignment takes place to understand needs between design and engineering to deliver their assigned feature(s). Squads consult DL/TL for technical guidance, PL for business guidance.",
      "Context": "Example Agenda (30 mins) Bonding activity (10 mins) Priority updates (5 mins) Each lead updates the whole team on immediate and upcoming priorities. PL shares important features, what features and deadlines are upcoming. Feature updates / assignment (5 mins) Each squad shares progress on their current feature, PL updates backlog to reflect progress Squads allocate themselves to new features (as makes sense) Features ≠ Enablers; Features are work to be done that contributes to the end product. Enablers are work that contributes to the team’s future ability to complete work. Alignment time for squads (10 mins) In each squad, required alignment takes place to understand needs between design and engineering to deliver their assigned feature(s). Squads consult DL/TL for technical guidance, PL for business guidance.",
      "branch": "Software",
      "topic": "Running an All-team Meeting"
    },
    {
      "id": 2,
      "Question": "How to run an Engineering Meeting",
      "Answer": "Team discusses most important Enablers to build, allocate work on building amongst themselves. Features ≠ Enablers; Features are work to be done that contributes to the end product. Enablers are work that contributes to the team’s future ability to complete work. Review any code being merged from Feature branches into Dev; team discusses how to improve code and design quality Blocker removal (5+ mins, team members may leave if they have no out-standing blockers) Team members discuss any blockers which need to be removed so that the engineers can continue to complete work",
      "Context": "Example Agenda (45 mins) Enabler prioritization and assignment (10 mins) Team discusses most important Enablers to build, allocate work on building amongst themselves. Features ≠ Enablers; Features are work to be done that contributes to the end product. Enablers are work that contributes to the team’s future ability to complete work. Code review (30 mins) Review any code being merged from Feature branches into Dev; team discusses how to improve code and design quality Blocker removal (5+ mins, team members may leave if they have no out-standing blockers) Team members discuss any blockers which need to be removed so that the engineers can continue to complete work",
      "branch": "Software",
      "topic": "Running an Engineering Meeting"
    },
    {
      "id": 3,
      "Question": "How to run a design meeting?",
      "Answer": "Any required brand work is assigned, reviewed, discussed, and assigned. Each designer shares the work they completed in the past week and others share area for improvement in addition to positive feedback. Next steps: Any decisions required to complete the next week’s work are made before designers leave.",
      "Context": "Agenda (1 hour) Brand work (15 mins) Any required brand work is assigned, reviewed, discussed, and assigned. Features ≠ Enablers; Features are work to be done that contributes to the end product. Enablers are work that contributes to the team’s future ability to complete work. Critique (45+ mins) Each designer shares the work they completed in the past week and others share area for improvement in addition to positive feedback. Next steps: Any decisions required to complete the next week’s work are made before designers leave.",
      "branch": "Software",
      "topic": "Running a Design Meeting"
    },
    {
      "id": 4,
      "Question": "How to run a leads meeting?",
      "Answer": "PL updates DL and TLs on client developments and feedback from client based on work showcased. DL updates TLs and PL on design progress and clarifies any needs from PL and TLs. TLs update DL and PL on implementation progress and clarify any needs from PL and DL.",
      "Context": "Agenda (15 mins) PL updates DL and TLs on client developments and feedback from client based on work showcased (5 mins) DL updates TLs and PL on design progress and clarifies any needs from PL and TLs (5 mins) TLs update DL and PL on implementation progress and clarify any needs from PL and DL (5 mins)",
      "branch": "Software",
      "topic": "Running a Leads (PL/TL/DL) Meeting"
    },
    {
      "id": 5,
      "Question": "What is the suggested meeting cadence?",
      "Answer": "All-team: Weekly, Engineering: Weekly, Design: Weekly, Leads: Weekly, Working Session: As needed",
      "Context": "| --- | --- | --- | --- | --- | | All-team | Weekly | 30 mins | All team members | Whole team aligns, eradicates shared blockers, bonds || Engineering | Weekly | 15-60 mins | All engineers, PL optional| Engineers remove technical blockers, agree new on necessary tech enablers (automations, CI/CD fixes, standards, etc.), conduct code review| | Design | Weekly | 60+ mins | All designers, PL optional| Share completed assignments, receive feedback, brainstorm ideas, make design decisions to move forward,assign new work || Leads | Weekly | 10-30 mins | PL, TLs, DL | Leads align on progress, requirements, next work priorities || Working Session | As needed | 120+ mins | All team members, PL optional| Team completes allocated work. User testing. |",
      "branch": "Software",
      "topic": "Suggested Meeting Cadence"
    },
    {
      "id": 6,
      "Question": "How to structure a team for collaboration?",
      "Answer": "Feature Squads are made of at least one designer, one frontend-focused developer, and one backend-focused developer. Together, these cross-disciplinary teams complete Stories, written by the PL, (aka Features). Engineering/Design Chapters are made of either all the engineers or all the designers on a team. Together, Chapters work on Enablers, written by the TLs/DL, to complete work which helps the team better complete its work. This can include Brand Identity, Logos, Typography, Figma Component/Swatch setup, on the design side, and CI/CD, linting, automations, system architecture design, etc. on the engineering side.",
      "Context": "Below is a diagram of how teams are set up into multiple streams to complete work for the project. Feature Squads are made of at least one designer, one frontend-focused developer, and one backend-focused developer. Together, these cross-disciplinary teams complete Stories, written by the PL, (aka Features). Engineering/Design Chapters are made of either all the engineers or all the designers on a team. Together, Chapters work on Enablers, written by the TLs/DL, to complete work which helps the team better complete its work. This can include Brand Identity, Logos, Typography, Figma Component/Swatch setup, on the design side, and CI/CD, linting, automations, system architecture design, etc. on the engineering side. The goal of this model is to get people to work together better than if each of them worked alone. Over management and/or bad management means people do less than they could have alone. On the flip-side, “just enough” management means people do their best (and feel their best doing it)",
      "branch": "Software",
      "topic": "Team Structure for Collaboration"
    },
    {
      "id": 7,
      "Question": "How to run a frontend design audit?",
      "Answer": "Engineers complete the development of the Feature. Engineers notify the designer and set up a time to Demo and review. Designer and Engineer walk through the completed feature together, alongside the Figma designs, and identify necessary improvements (as required): → Necessary improvements are noted and added to the Squad’s backlog for the next week → If an improvement is deemed too time-intensive, the proposed changes can be discussed with Leads, Chiefs, and other team members. The designer approves the implementation and the feature is merged into Production (assuming it also meets code quality standards).",
      "Context": "Before any Features are merged from Development → Production they should undergo a Design Audit: Engineers complete the development of the Feature. Engineers notify the designer and set up a time to Demo and review Designer and Engineer walk through the completed feature together, alongside the Figma designs, and identify necessary improvements (as required): → Necessary improvements are noted and added to the Squad’s backlog for the next week → If an improvement is deemed too time-intensive, the proposed changes can be discussed with Leads, Chiefs, and other team members. The designer approves the implementation and the feature is merged into Production (assuming it also meets code quality standards). This is a perfect use of Squad meetups in team meetings, or team channels for members to show their work and receive feedback on it. Note: if doing this in a team meeting, having a paper trail is a great way to make sure all the feedback is adequately recorded",
      "branch": "Software",
      "topic": "Running a Frontend ↔ Design Audit"
    },
    {
      "id": 8,
      "Question": "How can teams help eachother out?",
      "Answer": "Request design QA as needed and in advance. A component library is built into a Figma page since it makes it simpler to translate designs to implementation. Mockups are shared early and often so that engineering work can begin setting up while design work moves to polishing-focused stages. Even when not included in the designs, it’s useful to have discussions of additional user interactions such as animation, hover states, etc. which can be added to components and implemented across the project to “bring it to life”. Endpoints remain stable in both setup and contents, and mask implementation details, so that changes to the backend do not impact the frontend. Types (where possible) are shared across the codebase to remove complexity and need for duplication of work. Important to have a shared understanding of how data is likely to expand in scope over time",
      "Context": "Changes other members of the team can make which impact designers: Request design QA as needed and in advance. Changes other members of the team can make which impact frontend-focused developers: A component library is built into a Figma page since it makes it simpler to translate designs to implementation Mockups are shared early and often so that engineering work can begin setting up while design work moves to polishing-focused stages Even when not included in the designs, it’s useful to have discussions of additional user interactions such as animation, hover states, etc. which can be added to components and implemented across the project to “bring it to life” Endpoints remain stable in both setup and contents, and mask implementation details, so that changes to the backend do not impact the frontend Types (where possible) are shared across the codebase to remove complexity and need for duplication of work. Changes other members of the team can make which impact backend-focused developers: Important to have a shared understanding of how data is likely to expand in scope over time.",
      "branch": "Software",
      "topic": "Design ↔ Frontend ↔ Backend Impacts"
    },
    {
      "id": 9,
      "Question": "How to write and assign features and enablers?",
      "Answer": "When writing Stories/Tickets, describe outcomes instead of prescribing methods. When it comes to allocating work, do not assign specific people specific tickets. Instead, let them pick tickets which they want to learn from/feel prepared to complete. If nobody wants to pick up a Feature Story/Enabler Ticker, then it either needs to be broken down further, spiked (researched to be broken down), or nobody views it as important and thus you need to sell the importance better or realize it’s not valuable (and then cancel it and communicate its cancellation to your client). Empower the talented people you hire and lean on them to make key decisions and guide your project.",
      "Context": "When writing Stories/Tickets, describe outcomes instead of prescribing methods. For example, A) “Make a thing that does this, here’s some possible approaches if you’re really stuck on where to start” is markedly better than B) “Do x y then z”. A describes a desired outcome which the Squad can think critically about how to achieve. B describes an output which requires no complex thought to achieve and stifles autonomy and creativity, as such preventing your team from achieving their full potential. When it comes to allocating work, do not assign specific people specific tickets. Instead, let them pick tickets which they want to learn from/feel prepared to complete. If nobody wants to pick up a Feature Story/Enabler Ticker, then it either needs to be broken down further, spiked (researched to be broken down), or nobody views it as important and thus you need to sell the importance better or realize it’s not valuable (and then cancel it and communicate its cancellation to your client). Empower the talented people you hire and lean on them to make key decisions and guide your project",
      "branch": "Software",
      "topic": "Writing and Assigning Features (Stories) and Enablers (Tickets)"
    },
    {
      "id": 10,
      "Question": "",
      "Answer": "Make sure the front-end devs on your team have Figma access. If they do not, collect their emails and either: Give them can view access on Figma. Send the emails to the Chief Designer who will deal with permissions. Once the lofis for a feature are complete, move those screens (and any accompanying prototyping) to a new page titled: Feature Name: lofis. (ShowNxt example: Coach Signup: lofis) This consistent naming convention is important so your devs know where to look for designs! Use the Auto Flow Plug-in to draw connections between screens so your devs will understand the flows better. Let your team know what lofis are ready to dev! Steps for Front-End Development: Once designers let you know a feature is ready for development, open the Figma file (either within the desktop app or in a browser). If the design is ready for development, the designs will be found on the page named: Feature Name: lofis or Feature Name: hifis. This means the designers are done making adjustments to these screens. Navigate to the page you will be developing (using the left side panel) ",
      "Context": "Whether you are a PL looking to scope out Figma dev for your team or a software developer looking for resources, this is the place to be! TLDR; Really great info about Figma developer handoff: https://www.figma.com/best-practices/guide-to-developer-handoff/ Feel free to browse this example file to see Figma's can view capabilities: https://www.figma.com/file/ewVdWlAd3ZZ3lZSWBaTWZn/Generate:-Dev-Handoff-Example?node-id=0%3A1 Step-by-step Guide: Steps for Design Handoff: Make sure the front-end devs on your team have Figma access. If they do not, collect their emails and either: Give them can view access on Figma Send the emails to the Chief Designer who will deal with permissions Once the lofis for a feature are complete, move those screens (and any accompanying prototyping) to a new page titled: Feature Name: lofis ShowNxt example: Coach Signup: lofis This consistent naming convention is important so your devs know where to look for designs! Use the  Auto Flow Plug-in to draw connections between screens so your devs will understand the flows better Let your team know what lofis are ready to dev! Steps for Front-End Development: Once designers let you know a feature is ready for development, open the Figma file (either within the desktop app or in a browser) If the design is ready for development, the designs will be found on the page named: Feature Name: lofis or Feature Name: hifis This means the designers are done making adjustments to these screens Navigate to the page you will be developing (using the left side panel) BEST PART: Select the frame (A.K.A. art board) you are working on, and using the code panel (on the right-side of the screen) you have the opportunity to view code for CSS, iOS (Swift), and Android (XML) and any descriptions added to components. You also have the ability to export any assets from the file using the Export feature THIS CODE IS NOT MEANT TO BE DIRECTLY COPY & PASTED, IT SHOULD BE USED AS A HELPFUL RESOURCE Video for overview: https://youtu.be/B242nuM3y2s Components:Component usage is very important for both efficient design and development practices. Designers should be using components to build out their designs. (A.K.A. symbols in sketch) Definition: Components are elements you can reuse across your designs. They help to create and manage consistent designs across projects. You can create components from any layers or objects you've designed. These could be a whole range of things like buttons, icons, layouts, and more. https://help.figma.com/hc/en-us/articles/360038662654-Guide-to-Components-in-Figma#:~:text=Components are elements you can,icons%2C layouts%2C and more. In other words: Components are like puzzle pieces. A designer creates components, and reuses them as pieces of the design. If used correctly, developers should be able to create and style the components, and reuse them throughout the development process Useful Video: https://youtu.be/k74IrUNaJVk?list=PLXDU_eVOJTx5LSjOmeBYMuvaa4UayfMe4 ‼  Designers  ‼ If you haven't implemented components yet, it's okay! But it is important for you to transition your designs to be component-based. If you are unsure of how to do this, here are some great resources to use to learn about all things component-based design! Figma.com's resources Figma defines component best practices Introduction to component variants Auto Layout intro video There are so many capabilities built into components!!!! I encourage you to learn more about using auto layout, creating variants, and swapping out components easily. If you struggle with something in Figma, chances are someone has also struggled with the same thing. The internet and figma.com have some really awesome resources to help make your design process more efficient! (P.S. reach out to your Chief Designer with any questions, they would love to help!)",
      "branch": "Software",
      "topic": "Figma → Dev Handoff: Best Practices"
    }
  ]
}
